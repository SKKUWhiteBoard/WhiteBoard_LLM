Eric Joisel, a master origami creator, died on Sunday, sadly. Today is about rigidity again, and in particular, something called infinitesimal rigidity. This is going to be a very useful tool. It still captures essentially generic rigidity, but in a different way-- in a linear way. It's a lot easier to work with algorithmically. And it's also a lot of fun to play with, especially if you know how to do it yourself. Rigidity is really about the lack of motion. So let's define the idea of infinitesimal motion, or first-order motion. This is, again, suppose we start somewhere. And somewhere would be a linkage configuration. There's a graph, with edge lengths plus configuration maps every vertices to a point. I'm going to assume we're working in the plane for now. But really this works in-- I'll say d dimensions. So this is what I want to define. of an informal notion-- a valid first derivative of a motion. We've already defined motions. I want to take such a motion, essentially, take its derivative with respect to time, And evaluate that derivative at time 0. This is a fancy way of saying the following picture-- I'd like a motion which is some path in the configuration space. And motions are hard to think about. They can be really complicated. So I just want to say, well, how do you get started moving? What direction do you go in in a linear sense, to the first order? What's the derivative? can think about this in the absence of a motion. If the motion exists, surely you can take this derivative and evaluate it. But if there's a way to get started moving, that doesn't actually mean you could actually move. I'm just defining an infinitesimal motion to be a velocity vector for every vertices, such that this property holds. This is a dot product between two vectors. If you have two vectors, a and b, you take their their direction or derivative of v. dot product, this is just something like this. You take the x-coordinates. You multiply them together, and so on. Add them up. And we're going to need some linear algebra. That's one useful linearity thing. So these are where the configuration places vertices v and w. So this should be true for each edge v w on the graph. This is a vector C of v minus C of w. It's a vector that would point from w to v in the configuration. right part has no real intuitive meaning, but it involves this thing-- some velocity vector for w-- and the velocity vectors for v. It's actually a very intuitive relation. Basically, we want to understand how this length changes to the first order. So this is a dot product in d of w-- that vector-- dot product with C of v minus C of w. It turns out dot product corresponds to projection. I'm projecting onto this one. That's how you'd write it algebraically. And same deal over here. general, we want this thing to equal that thing. And if you rearrange terms, that's the same thing as this property. I just take this one minus this one, and set it equal to zero, and you get that. OK, so this is some intuition. Maybe it makes sense, maybe not. In the end, this is all I care about. And it's useful to realize that it's a first derivative of a motion, because what that implies is that if there's a motion-- a real, honest to goodness motion-- then there's an infinitesimal motion. the same statements. This you prove just by taking a motion and taking its derivative. This is identical to that. So this is useful because if we can ever find something and show that it's infinitesimally rigid, then we've determined that it'm rigid. Question? STUDENT: [INAUDIBLE] dot product [INAudIBLE] at a left right turn is 0, or that the terms are at 90 degrees to each other? PROFESSOR: Yeah, this dot product basically means these two vectors are at90 degrees toeach other. this way, but they're equivalent. All right, so how do we tell whether something's infinitesimally rigid? Because somehow that's useful to us. Well, there's a saying that everything is linear to the first order-- sort of a tautology. And all you need to observe is that this constraint is linear in what we don't know. So I want to know is there some set of velocity vectors d of v, and d of w, for all the vertices, so that these constraints hold. is a linear equation. The fancy way to write this is as a matrix equation, if you want. My matrix R is going to have a row that has a whole bunch of zeroes. And then at some point, it has basically various versions of this vector. But because this is one equation, but in two dimensions, there's two parts to all these vectors. Two dimensions that'll look something like this-- why did I change the order? I think it's two dimensions. right. OK, this is not very amazing. It's just there are going to be four terms in two dimensions in this equation, because we've got d of v times this vector. So there's a x-coordinate vector, and the y-coordinates vector,  and in d dimensions, there will be d of them. Here in two dimension, I've got the x- coordinate of the vector,. So this will end up getting multiplied on the right hand side by d of. v. know the configuration. We just want to know is there some set of velocity vectors such that the rigidity matrix times this is equal to zero? This is called the set of d's i for which this is possible. It's called the null space of this rigidity-- null referring to that 0, or the kernel. The set of all infinitesimal motions is thenull space of that matrix, also known as the kernel of the matrix. And so what? Well this lets us use a bunch of theorems in linear algebra. There's a fun theorem called the rank nullity theorem from linear algebra. If you have a matrix, you take its rank-- which is another quantity-- and its nullity, and you add them together, it will be the number of columns in your matrix. This is called the nullity of the matrix. Now in our case, theNumber of columns is d times n. We have n vertices down here, and each of them has d coordinates. So for us, this is dtimes n. So this is like a conserved quantity. can be done in polynomial time. So this is good news. intuitively what it corresponds to is the number of useful edges. And this thing is theNumber of degrees of freedom. So it turns out these will always be equal to d times n in summation. And what we care about, infinitesimal rigidity, means that-- or let's say it's infiniteimally rigid if and only if the nullity of the matrix is the space of rigid motions, which I have to look up. In general, in d dimensions, it's this-- d plus 1 choose 2. it's another way of thinking about essentially everything we've seen. And if you know linear algebra, it's useful. Otherwise, I'll tell you how we can use it. OK, one mathematical thing we can do is give another definition of a generic point set. Last class we talked about one definition of generic, which was that you forbid all non-trivial polynomial or algebraic rational equations on your points. This definition will be easy to think about if you're used to linear algebra. say 3, and I choose k rows-- the same number of rows and columns. I look at those elements in the intersection, that's a square matrix. That's a minor-- that 3 by 3 square submatrix is called a minor. So there's a whole bunch of minors, but it's only finitely many. It's not easy to check. You take all the minors of your rigidity matrix. And here I'm imagining the complete graph, so there's tons of edges. So this'll be independent linkage. I'm saying is if it's non-zero for some choice of C, then it should be non- zero for this choice ofC. And if you find such a configuration C-- or I guess we call this a realization C-- then that C is generic. So it's not useful in a computable way, but it's a definition. It's a little bit nicer. And now there's a bunch of fun facts about infinitesimal motions. I'm sorry. and rigidity, and the relation to the generic case. So there as we have before, this definition is not quite the same, but it's effectively the same as the last one. Almost every configuration is generic. So if you want to tell whether a 3D graph is generically rigid, you take a random realization in 3D. You compute the rank of this matrix generalized to the 3D case. You see is it 3 n minus 6, and that will tell you whether that generic realization is infinitesimally rigid. so important, because it's so easy algorithmically. Things become a lot easier. Let me draw you one example just to show what happens at non-generic points. I've actually drawn this example before. These three points are collinear. And you can work out there is some minor that is 0, but shouldn't be. And it's allowed to move straight up or down-- anything perpendicular to this segment. That's always true. If you take a segment, and you move one vertex but not the other perpendicular to the segment, that's a valid infinitesimal motion. segment, I get 0. So this length is not changing to the first order. And this is really necessary. To the first Order, you can't really distinguish this guy actually moving up, and therefore getting slightly longer versus this guy moving along a circle centered at that point, which is a valid motion. But it's pretty accurate. And if you perturb this example, infinitesimal rigidity will give you the right answer. This is an example where inf initesimal flexibility is a little weaker than having a motion. reverse holds. If there's a motion, there's always an infinitesimal motion. If you're infiniteimally rigid, you're always rigid. That example is rigid, but not inf initesimally. OK so far? That's the more technical part of the lecture. Question? STUDENT: Will [INAUDIBLE] be square matricies? PROFESSOR: The rigidity matrices are almost never square. The minors are going to be square, because we told them to be. that's another good question. What happens if I add more edges than this many? The rank just won't go up. Any edges you add will add redundant constraints, and so the rank can never go above this value. You need at least this many edges to get there, and we know we can get there with that many edges. You could make it a super-tall matrix if you want, but you're not going to increase the rank. All right, let's use this for something more fun. So maybe go over here. Tensegrity-- so this is in some sense an extension of rigidity theory to a whole other theory called tensegrity theory. Don't think he invented tensegrities, but he invented the word. And they are things like this-- here's a tensegrity built and given to me by Bob Connolly. And it has well, I guess, there are three kinds of edges physically. There are the springs, There are these struts, and there are these wire cables. And its rigid. It's a little flexible, just because the springs aren't perfectly stiff, like all springs. And we're going to model the three kind of edges. live in, at least to the first order, whatever. Edge lengths of bars should never change. Now we have these cables. Now cables really can get shorter. But what it prevents is getting longer. If I pull-- you can't tell, but I'm pulling really hard on these vertices apart. Nothing happens, because this cable can't get any longer. So cables prevent extension, but they do not prevent compression. All these struts are preventing is compression. They don't prevent expansion. So that's the thing we want to model. It's a generalization of a linkage and where we allow three kinds of edges. We can have cables, which is the length can decrease, but it can't increase. And there are struts, which are the reverse-- you can increase but not decrease. Seems like a useful generalization, especially because people build things they actually use struts and cables. I think I have an example here. There's this guy, Ken Snelson, who makes a whole bunch of cool tensegrity sculptures. That's to give you an idea of height. look up. It has this really cool, sixfold rotational reflectional symmetry. I could stare at this for hours. So we want to understand those structures. This one's also rigid, hopefully. It's been standing for 40 years. So what can we define in this generalized setting of tensegrity? We want motions. We want generic rigidity. And we want infinitesimal rigidity, too. Well, all but one of them carry over to this. OK, we can define a configuration space. The problem is, there's no notion of generic rigidity. For example, this is a generically flexible linkage. We all know it. These are things they can expand, but cannot contract. Then this configuration is rigid or flexible? Flexible, yeah. The white part is a one degree of freedom linkage, and if you move this thing in a particular direction, indeed, this increases and that increases. Check it. Now I take my yellow chalk and add struts. Maybe I'll put some arrows on it to make it more obvious. This one is rigid. The only way to move the square-- or in fact, any generic convex configuration-- is one of these pairs has to get shorter. So we lose generic rigidity. But infinitesimal rigidity still works, and generic configurations are still meaningful. It's just that they're not all the same. There's not, in this case, for four vertices, there's two kinds of generic configurations. So this is the same graph, and the same labeling of which edges are bars and which are struts. dot product, and I claim this is really measuring-- it's a number, and it's measuring the sign's change in length of that edge. So if C of v minus C of w dot product with d of v plus d of w is greater than or equal to 0, that's the property I want for struts. That says it gets longer or stays the same to the first order. Now of course, in reality it might get slightly shorter, but not in the first derivative. I have linear equations. I also have linear inequalities. So in fact, I can write it as some other matrix R prime. Actually, it's the same matrix. R prime times d is greater than or equal to 0. This is the general form of a linear program. And you can write an equality constraint in this world just by taking it and its negation. That forces them to be equal to zero. All you need to know is it there are fast algorithms to solve this, also. And saying that it's greater than or equal to 0 [INAUDIBLE]. PROFESSOR: Oh, that means element lines, sorry. You take a matrix times a vector. You get a big vector. This is a vector of zeroes. And it's just saying every element in the vector is greater than and equal to zero. So it's a fancy way of rewriting this stuff again. But this is what we call linear programs, and that's what's solvable. Stress, for me, is just a real number assigned to every edge. And here I'm going to use the word edge to mean bar, strut, or cable. If I have a cable, then that number should be non-negative. If we have a strut, it should benon-positive. If you have a bar, then the number s of e for each edge e, and have to have three properties. So that's the next trick I want to pull. I'm just going to tell you what you get. The equilibrium condition is that if I take the sum over all vertices w, where v w is an edge, the weighted vector C of v minus C of w-- could be positive, or negative, or zero. Let me draw a picture. I'll draw a real example, how's that? Here's a rigid linkage. I'm not going to say yet which edges are struts and cables. In some sense, I can do that later. And I'm going to put numbers 1 along all the outside edges and the numbers 3 along the inside edges-- sorry, negative 1 and positive 3. vertex like this one, and saying OK, well, I take all of the incoming, whatever. Let's think of all the edges incident to that vertex. I weight them by this number. In this case, they're all multiplied by 3. So I take this vector. I multiply it by 3, and it gets three times as long. I should get the zero vector. And I'm going to draw arrows here to signify what this means intuitively is that this edge is pushing with a really big arrow. this guy, I have these edges of weight negative 1. That means it's going to pull, and it'sGoing to pull with the arrowhead of size 1. OK, and I claim also that these vertices do not move subject to those three forces. How do you check that? The proper way to check it is to draw what's called a force polygon. Those who have done structural engineering know this. So I take, let's see, there's this vector, which is length 3 times that, so it would be something like that long. And let's say I'm pushing in that direction, so I go there. Then I follow this thing with the weight of 1, but in sort of the opposite direction. So it will be like this. And then the other force is this one. doesn't actually matter which order I do these in. And if I end up back where I started, that means the total force is 0 as a vector. That's the force polygon. It's a geometric condition, if you will, that each vertex is stationary. That is the notion of being in equilibrium. And this is just the algebra to write that down. Now what the heck does this thing mean intuitively? If your tensegrity is going to be rigid, somehow the edges can prevent a motion. And intuitively, what that means-- I'm going to say this right-- so this is like an edge pushing really hard away from itself, against the vertices. Theory goes back to Roth and Whiteley, 1981-- good year. If you can find a stress that is nonzero on every particular strut or cable, then all of those things are effectively bars. Every infinitesimal motion holds the length of that edge fixed. This will actually always be true-- the corresponding linkage is rigid-- because I put in every edge is in there. If I turn them all into bars, this thing's not moving at all. Strut can have zero stress-- the weight is zero. A spiderweb is something where every edge is basically a cable. All of the edges can have a positive stress, and it will be in equilibrium. In spiderwebs, in fact, this is the same-- these two-- rigidity and positive stresses are the same thing. This is a brand-new result from this summer at [? OSMI ?] by Robert Lang and Alex Bateman. Here is an example of that-- a spiderweb, so to speak, but drawn visually. And you turn it into a crease pattern, fold it flat and it works.  origami tesselations have been around since the '60s. Chris Palmer revitalized them in the mid '90s. There's this cool algorithm for building them. So you take some tessellation like these squares, and triangles, and hexagons-- some collection of polygons. You shrink all of them, and then you fold them into a tesselation. It looks pretty cool. It's folded from one square, and it's folded in some sense with a regular pattern. You can see regular hexagons. a little bit, but all by the same amount, and then you twist them a little bit. So here they are twisted. And then you just connect the dots. So these two edges used to be joined to each other. That's the green edges. And that's your crease pattern. Now the question is, when does this work? This algorithm has been around forever, as far as I know. But when does it work? And there is a brand-new result from the summer that it works for some choice of those angles. I want to tell you one more cool thing about stresses and tensegrities-- yet another characterization of stresses, which is polyhedral liftings. A polyhedral lifting is going to work if I have a non-crossing configuration. So it's going to be a z-coordinate z of v for each vertex v such that each face remains planar. Because I forbid crossings, I end up decomposing space-- the plane here-- this only works in two dimensions. This is one thing that does not generalize to arbitrary dimension. In general, you're going to have a lot of non-triangles. Those should all remain planar. One thing you can do-- there's some freedom here. If you have any lifting or, for example, you could not lift them at all. Set all the z-coordinates to zero. That's fine. You could also just lift everything onto some other plane, and generally have a rigid motion of freedom. You can lift.of triangles here. This guy can be lifted however it wants in this particular picture. can't translate around, but you have one two-degree two-rotational freedoms, I think. So say remove rigid motions by forcing the outside face to lie in z equals 0. So in this particular example, this guy can go to any value, positive or negative, but that's it. Now, this is a lot like stresses-- in fact, it's identical to stresses. It's probably not obvious, but just like stresses where you could set everything to 0, here you can also setEverything to 0. This is called Maxwell-Cremona Theorem.  Maxwell proved this, or claimed it in 1864. Theorem is there's a one-to-one correspondence between the equilibrium stresses and polyhedral liftings. A positive stress corresponds to a mountain, which is the same picture upside down. A zero stress corresponds. to a flat angle-- doesn't have to be horizontal, but it has to be flat. So it could be like this. I'm going to need this in a moment proving the next thing. It's really hard to see. That's a valley edge here. Theorem: All pairwise distances between vertices increase or stay the same. Key to proving it is by making the theorem stronger. Tensegrities will force things to be expansive. So if initially you're non-crossing, you will be non-Crossing forever. That really makes life easier, because crossings are hard to think about. This lets you not worry about crossings. How do I worry about distances increasing? Tensegrity. You compute an equilibrium stress, which is easy to do by linear programming, and draw-- you can directly construct from that the 3D lifting. configurations where no two edges cross. This is a smaller version of our old configuration space. I'm not going to define it formally. It's a bit messy. But it's not too nasty. Question? STUDENT: What if you have one of those diagonals and switch it to be in relation to each other [INAUDIBLE]? PROFESSOR: You want this picture and-- STUDENT, Either one. Or-- that's crossing-- not allowed. linkage. And a linkage is locked if its configuration space is disconnected. So this would be kind of sad news if you're looking for motions. It means you cannot get from everywhere to everywhere. There are some locked configurations that cannot get back to start. And the Carpenter's Rule Theorem is about one case of that. It was essentially my Ph.D. thesis, so paper in 2000 by Bob Connolly who made that tensegrity, [? Gunta ?] [? Rota] ] and me. And it says that if we have a linkage, and say we take a configuration of that linkage, let's say it's of maximum degree 2, so every vertex has at most two edges coming out of it. Then there's a motion of that. linkage that straightens out-- so if you have maximum degree. 2, you have paths, and you might have some cycles. You might have many of them, and it's going to straighten all the paths and convexify all the cycles. the chain. I could take this one, find a motion that straightens the chain. For convex cycles, it's a little less obvious, but it's also true. There's one catch which I didn't say here. I need to add outermost. When you have nesting like this, you're in trouble. This guy is not going to get straightened out. It could be super long. It may not have room to straighten out inside that convex chamber. So these guys will come along for the ride, but they won't actually getting straightened. The outermost guys will get straightening and convexified. Claim this tensegrity is infinitesimally flexible, meaning it is not rigid. And that will imply that there's at least an infiniteimal expansive motion. And then you have to use some fancy tricks-- not fancy, some tricks I don't want to talk about. You basically integrate that vector field, and that will give you an actual expansive motion and straight or convex. But how do we actually prove this thing? Let's not worry about that. The interesting part is show that at least infinitsimally, this tense grity moves a little bit. this thing to hold for any of the struts and the cables. And therefore, in some sense, none of them are fixed, and therefore, you're actually flexible. That's implied by this duality statement. This will be true if and only if every polyhedron lifting is flat. So I guess in our case, it will be 0, because the outside face sets all the z-coordinates to 0, so everything else will have to be in that plane. So these are equivalent statements. All I need to prove is that every polyhedral lifting isflat. to show it can't happen. If everything's a valley, something's going to go wrong at the top picture, because you've got to have mountains, like, turn around. Look at the maximum z-coordinate. Now this could actually look like many different things, but I'm going to consider one case where you have one point. And then around that, everything descends. OK, these are all the edges incident to that point. You form some kind of-- OK, so this is maximum z. This is another plane. you have a reflex angle, like this one, you get a valley edge here. You can see that 3-dimensional picture. Every polygon has at least three convex vertices. That means there are at least 3 mountains incident to this maximum z-coordinate. But mountains have to correspond to positive stresses. Positive stresses have to correspondence to bars, because struts can't carry positive stress. So that means you have at leastThree bars incident to that edge. But I assumed I was maximum degree 2-- contradiction. Isn't that cool? might actually only get something around here. But again, you can't get from here to around there without some mountain. It's hard to even imagine, because it can't happen. So that's the one way it can happen. You can't have strict valleys, but you could have them all 0. So in fact, the one case where you can have stress is when you have all of this outside stuff flat. And then inside you don't know. I can prove, using this generalized lemma, that that's not possible. all of these regions are locally flat. And therefore, this whole outside face has to be flat. Therefore, I'm particular. I can't have a reflex vertex, because then this side would have to all be flattened. So then the whole thing is flattened. Also straight this can happen. I think with straight, you don't get any stress. Here you can actually have a lifting. Actually, all these guys would be below the plane, because everything's a valley. This would be like an actual valley, where you have a village or whatever. That can happen, but only when the boundary of your valley is convex. And so that proves the theorem. dimensions, and maximum degree 2. We can think about what happens with degree 3. Then you can get locked things. What happens in three dimensions? Then you Can't get locked Things. What happen in four dimensions? then you can't get Locked Things. Oh, and why is it called the Carpenter's Rule Theorem? Because this is a carpenter's rule. And in a car Carpenter's rule, actually, all the edge lengths are the same. But as far as we know that doesn't make this theorem any easier to prove. still buy them at the hardware store. That's it. You can't buy them online. You have to buy them from the store. They are not available online. They can be bought at the store, but you have to pay for them in cash. They're not available on the internet. You must buy them in the store to get them. You cannot buy them on the Internet. They must be bought from the hardware stores. That is it. They have to be bought in the stores.