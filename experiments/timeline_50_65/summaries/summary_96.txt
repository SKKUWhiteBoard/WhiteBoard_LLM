Eric Joisel, a master origami creator, died on Sunday, sadly. I encourage you all to come see "Between the Folds" on Tuesday, showing Tuesday evening. There's a great interview with him, and there's an interview with me, too. We'll be back on "Larry King Live" next week. Back to the page you came from. Follow us on Twitter @CNNLarry and @CNNOpinion. Follow CNN Living on Facebook and @cnnlondon. it really captures his spirit. And sadly, I never met him in person. The last I corresponded with him was to get permission to show these photos in class. So that sucks. Today is about rigidity again. And in particular, something called infinitesimal rigidity. So last class was mostly about infiniteimal rigidity. So this is about infinity. And this is what infinity is all about. It's about the idea of infinity. And it's also about the fact that it's possible to be infinite. generic rigidity. This is going to be a very useful tool. It's a lot easier to work with algorithmically. It still captures essentially generic rigidity, but in a different way-- in a linear way. And it's a different kind of rigidity than we're used to seeing in the real world. We're going to talk about a variation, although related to generic rigidity. And we'll talk about how to use it in a variety of ways. We'll be back next week with a look at the next episode. going to be super useful. So the idea is we think about rigidity-- does a linkage move or not-- to the first order. First order means first derivative. OK, so I'm going to do some analysis stuff-- calculus, which you should all know, because is the General Institute Requirement. Don't be afraid, it's going to be really fun. It's a lot of fun, but it's also really hard to do. It takes a long time to do it. worry, you don't need to know much. So in particular rigidity, is really about the lack of motion. So let's define the idea of infinitesimal motion, or first-order motion. This is, again, suppose we start somewhere. And somewhere would be a linkage configuration. There's a linkage. And there's a graph, with a line. And a line is a line, and a graph is a graph. And so on and so on. edge lengths plus configuration maps every vertex to a point. I'm going to assume we're working in the plane for now. But really this works in-- I'll say d dimensions. So this is what I want to define. This is a valid-- this is sort of the sort of way to look at it. It's a valid way of looking at it, but it's not a perfect way to use it, I'm not going to say that it's a perfect solution. of an informal notion-- a valid first derivative of a motion. We've already defined motions. I want to take such a motion, essentially, take its derivative with respect to time, And evaluate that derivative at time 0. This is a fancy way of saying the following picture-- I'd like a picture of the world at the beginning of time, and the end of time at the start of time. And I want the world to look like that picture, and I want it to look as if the world is starting at that point in time. motion, which is some path in the configuration space. A point in that space corresponds to a configuration. And motions are hard to think about. They can be very different from one to the next. We have a motion is somePath in the Configuration space. And we have a Motion is some Path in that Space. And a Motion Is Some Path In The Configuration Space. We Have A Motion is Some Path in The Configuration space, And We Have a Motion In The configuration space, This Is A Motion. This Is The Motion. really complicated. So I just want to say, well, how do you get started moving? What direction do you go in in a linear sense, to the first order? What's the derivative? What're the tangent right at the beginning? And then this notion will, stated in terms of motions-- you can go in any direction you want, in any way you want. I think that's the most important thing to start with, and then you can move on from there. can think about this in the absence of a motion. Say, well, yeah, I don't really know whether this curve exists, but let's just see, does this initial starting direction exist? And that's actually a little weaker than the whole motion existing. If the motion exists, surely you can take it to the next level. If not, you can just try to find a different starting direction. And if you can't find a starting direction, then you can try to change the direction of the motion. this derivative and evaluate it. It's not totally obvious, but it's true. You need some smoothness. But if there's a way to get started moving, that doesn't actually mean you could actually move. Why don't I give a more formal definition, and a more useful one-- but that's the intuition. That's a good way to look at it, I think. I don't know if that's true, but I think it's a useful one. So another way to think of an infinitesimal motion is to just give a velocity vector for each vertex. For every vertex v, we're going to get some velocity vector d of v-- that's direction or derivative of v. And another way of thinking of it is to say how each vertex moves in d dimensions, instead of saying how each vertices moves in v dimensions. And that's a different way of looking at it. It's a very different way to look at the motion of a graph. with motions, we were supposed to preserve edge lengths. So here we'd like to preserve Edge lengths, but that's actually kind of hard to do. If you take an edge-- so I have two vertices, and I assign some velocity vectors, something like this-- as soon as you move a part of the edge, you lose the edge length. So that's kind of what we're trying to do here. We want to preserve the edge lengths of the vertices. But that's not always possible. little bit in that direction, the edge length won't be quite the same. But it'll be the same to the first order, so this is going to be a little subtle. And in the book, we take the derivatives. We work out all the details, but I'll just tell you. But I'lljust tell you, it's going to look a little bit different. It'll be different, but it'll look the same, I'll tell you that. It's a little more subtle. what the condition is, because ultimately all we need is this condition. I'm just defining an infinitesimal motion to be a velocity vector for every vertex, such that this property holds. This is a dot product between two vectors. If you have two vectors, a and b, you take their dot product. You take their velocity vector, a, and you take the dot product, b, between the two. It's a very simple formula. It doesn't have to be complex. dot product, this is just something like this. You take the x-coordinates. You multiply them together, and so on. Add them up. And we're going to need some linear algebra. That's one useful linearity thing. So these are where the configuration places are, and these are the locations where we want to put the computers to work. And this is where we put the computer to work, and this is the location where the computers will be placed to make the computers work. vertex v and vertex w. So this should be true for each edge v w on the graph. This is a vector C of v minus C of w. Let me give some labels. Let's say this is w, and this is v. Letâ€™s say these are the points that are connected to each other. So, for example, this is a point that is connected to w and v. And this is the point where v and w are connected. And so on and so on. the configuration places w and v at. Then C of v minus C of w is this vector. It doesn't really have any space. It's a vector that would point from w to v in the configuration. That's the left part. The right part is where w would be if it were in a different configuration. The left part is the w that would be in that configuration if it was in the same place as the right part of the configuration, which is w. That part is called the w-v configuration. right part has no real intuitive meaning, but it involves this thing-- some velocity vector for w-- and the velocity vectors for v. So this is some relation on this vector and these two vectors. It's actually a very intuitive relation. Let me tell you what it means. Basically, we basically have a relation on the velocity of w and velocity of v, and this is the relation between the two. It is a relation that has no intuitive meaning. But it's very real. want to understand how this length changes to the first order. So this guy's moving to first order in this direction. In fact, it's moving on some curve, and the initial tangent is that direction. To understand how that motion changes this edge length, turns out to be the right thing to do. And to understand why, go to the bottom of the page and look at the bottom right corner of the screen. It will show you how to get to the center of the image. to do is to project this vector onto this one. So as this guy moves in that direction, This is the first-order change. OK, that projected length is actually very simple. This distance here is a first- order change of this length as caused by this vertex moving. This is a projected length of this distance. This. is the projected length. of this. length. It's the first order change. of the length. As a result, this. is a projection of the distance from this to this. is again, some linear algebra stuff interpreted geometrically. This is a dot product in d of w-- that vector-- dot product with C of v minus C of w. It turns out dot product corresponds to projection. So I'm taking this vector. I'm projecting onto this one. That's how you'd do it in a game of "Where is the ball going to land?" you ask. "The ball is going to hit the center of the screen," the mathematician says. write it algebraically. And same deal over here. If I project this vector onto this one, that's going to be the first-order change to this edge length. So this is d of v dot C of v, minus C of w. And that's the first order change to the edge length caused by this vertices moving in that direction. That's the change in the length of the vertices. So that's what we call a first- order change. And it's the same thing for the other vertices as it is for the first one. if I want this edge length not to change at all to the first order, then this projected length should equal this projectedlength. And that's why I drew it this way. So it turns out this is a valid motion, because that projected length equals that one. And in. And so on and so on, until we get to the point where we don't need to change the edge length at all. And then we can change it back to what it was before. And we can do it again. general, we want this thing to equal that thing. And if you rearrange terms, that's the same thing as this property. I just take this one minus this one, and set it equal to zero, and you get that. OK, so this is some intuition. Maybe it makes sense, maybe it doesn't, but it's a good starting point for a conversation. It's like a conversation between two people who are trying to make sense of each other. It can go a long way. If there's a motion-- a real, honest to goodness motion-- then there's an infinitesimal motion. And it's useful to realize that it's a first derivative of a motion. In the end, this is all I care about. I'm going to abbreviate that "infinf" to "not.not. not. Not. not the same thing. Not the same as not. not being the same things. Not even the same. thing as not being in the same place at the same time. motion. Infinitesimal means smaller-- very tiny-- smaller than anything, I think is the literal meaning. So this is useful to us, because the contrapositive says if a linkage is infinitesimally rigid-- which just means if there is no infiniteimal motion-- then it's rigid. So these are very useful for us to work with in the field of computer science and other fields of science. We can use them to help us understand how computers work. the same statements. This you prove just by taking a motion and taking its derivative. This is identical to that. So this is useful because if we can ever find something and show that it's infinitesimally rigid, then we've determined that it'm rigid. Question? STUDENT: [INAUDIBLE] dot product [INAudIBLE] at [inaudible] at the end of the question. The answer is that the dot product is a product of the motion and the derivative. a left right turn is 0, or that the terms are at 90 degrees to each other? PROFESSOR: Yeah, this dot product basically means these two vectors are at90 degrees toEach other. That's another geometric meaning. I don't have a geometric picture. Maybe there is one, but I donâ€™t have one. Iâ€™m not sure if there is a geometric meaning for it. I just want to know what it means. I want to understand it. have trouble thinking about d of v minus d of w. That's not an intuitive thing to me, but it's something. And we're saying that that vector should be perpendicular to C of v plus C of W. However you want to think of it, I like to think about it. I'm not a mathematician, but I like the way I think about things. I think that's a good way to start. I don't know how to explain it to you, but that's how I think it is. this way, but they're equivalent. All right, so how do we tell whether something's infinitesimally rigid? Because somehow that's useful to us. Well, there's a saying that everything is linear to the first order-- sort of a tautology. And all you need to observe is that this constraint is linear. And that's how we can tell if something's rigid or not. And we can do that by looking at the shape of the object. We can see that the shape is rigid or non-rigid. in what we don't know. So I want to know is there some set of velocity vectors d of v, and d of w, for all the vertices, so that these constraints hold. But I already know C of v and I know W of w. This is just where we are. We don't need to know all the details. We just need to be able to say that they hold for all vertices. And we can do that by knowing the velocity vectors. are these vertices currently. And I want to know can I get started moving? So these are my known quantities, and these areMy unknown quantities. This is just some linear thing. And the dot product-- I mean, this is all just constant. I know what they are. So this this is just a constant thing. I don't know what it is, but I know it's constant. And that's what I'm going to try to do with it. I'm just trying to get it to work. is a linear equation. The fancy way to write this is as a matrix equation, if you want. So this is the idea of a rigidity matrix. So we have a whole bunch of these constraints, one for every edge. And whenever you have a bunch of linear constraints, you you have to solve for them. This is the way to do it. It's not a perfect solution, but it's a good starting point. And it can be used to solve other problems. can write them as R-- some big matrix-- times the velocity, or call them d's equals 0. So I can absorb this into a matrix. If you're used to that, great. Otherwise, this is what it looks like. My matrix R is going to have a row that has a velocity of 0, and a column that has an velocity of 1, and so on. And this is how it looks in a matrix, with the velocity of the column being 0, the column of the velocity being 1. whole bunch of zeroes. And then at some point, it has basically various versions of this vector. But because this is one equation, but in two dimensions, there's two parts to all these vectors. Two dimensions that'll look something like this-- why did I change the order? I think it's because I'm trying to make a point about the order of the numbers in the equation, and I want to make the point that the order is different in each dimension. right. OK, this is not very amazing. It's just there are going to be four terms in two dimensions in this equation, because we've got d of v times this vector. So there's a x-coordinate vector, and the y-coordinates vector. In d dimensions, there will be d of them. And in d dimensions there are four terms, so there are d of d of this equation. And that's what we're trying to do. We're not going to get it all at once. Here in two dimensions, I've got the x-coordinate of the vector, and the y-coordinates of the vectors. So this will end up getting multiplied on the right hand side by d of v. So the two v rows, and this part will endup getting multiplied byd of w. This is the result of multiplying the x and y coordinates by d and w respectively. The result is that the two rows of v and w will be the same in both dimensions. yes, so these guys switched around. It's now w minus v in order to implement that minus sign. So whatever-- the point is you get a matrix. And what we care about, what we're trying to solve for, is d. We know this entire matrix, because we know c. And We know d, so we know we have to do w. We do w, and we do v, and then we do d, and so on. And so on and so forth. know the configuration. We just want to know is there some set of velocity vectors such that the rigidity matrix times this is equal to zero? This is called the set of d's i for which this is possible. Good old linear algebra-- it's called "good old lineargebra" Anyone know what the configuration is? If so, please send us a photo or video to jennifer.smith@dailymail.co.uk. For confidential support, call the Samaritans on 08457 90 90 90, visit a local Samaritans branch or click here for details. the null space of this rigidity-- null referring to that 0, or the kernel. So the set of all infinitesimal motions is thenull space of that matrix, also known as the kernel of the matrix. And so what? Well this lets us use a bunch of theorems in linear algebra, such as theoryms in matrix theory. The null space is the space of the zero, the zero of the kernel, and the zero point of the whole matrix. algebra. So one fun fact is that the dimension of this space-- the space of all infinitesimal motions-- seems like a useful thing to know. We want to know how many-- this is basically the number of degrees of freedom in infiniteimal land, which is not quite reality, but it's fun to think about. It's a fun way to look at the world, and it's a great way to learn more about the world. It can be a useful tool for mathematicians. close. This is called the nullity of the matrix. That's just the definition, but there's a fun theorem called the rank nullity theorem from linear algebra. Which says if you have a matrix, you take its rank-- which is another quantity-- you take it's nullity, and you add them together, and the result is the rank of a matrix. It's called the "rank nullity" theorem, and it applies to all matrices, not just those with a rank of 1. it will be the number of columns in your matrix. We have n vertices down here, and each of them has d coordinates. So for us, this is d times n. So this is like a conserved quantity. Now in our case, theNumber of Columns in the Matrix is d. The number of Columnes in the matrix is d, so the number is n times d, or n times n, orÂ n times d. This is the quantity we use for our matrix. What we care about is the nullity. This is the space of motions-- infinitesimal motions. And so consequently, we cared about this thing called the rank. And if you've ever seen linear algebra, especially linear algebra algorithms, the bread and butter business is computing the rank of a matrix. This was the subject of this week's episode of "Innovation" on CNN.com's "This Is Life with Lisa Ling" The show airs at 8 and 10 p.m. ET on weekdays and at midnight on weekends. can be done in polynomial time. So this is good news. intuitively what it corresponds to is the number of useful edges. And this thing is theNumber of degrees of freedom. So it turns out these will always be equal to d times n in summation. And what does this mean for you? Share your thoughts in the comments below or tweet us @CNNOpinion. Back to Mail Online home. back to the page you came from. Click here to read the original article. we care about, infinitesimal rigidity. In general, in d dimensions, it's this-- d plus 1 choose 2. In two dimensions, there's a difference between d and 1. We care about rigidity, means that-- or let's say it's infiniteimally rigid if and only if the nullity of the matrix is the space of rigid motions, which I have to look up. It's this -- d plus1 choose 2 -- in two dimensions. In two dimensions, ideally your nullity is-- if you want rigidity, your Nullity should be 3.three rigid motions. You've got the two translations and the rotation. Those we're not getting rid of. They still exist in infinitesimal land. And what this is telling us is then the rank of the universe is 3.3 rigid motions, not 3.2. It's the same as 3.5 rigid motions or 3.6 rigid motions in 3D. of the matrix should be d n minus that. In two dimensions, that is 2n minus 3. So this is telling us something we already knew, but essentially for free, which is kind of fun, if you know all this linear algebra. Which admittedly, even if you've learned linear algebra, you probably already know this, even though you may not know how to use it. It's just fun to try and figure out how to do it in a new way, I guess. that may not be the first thing you care about in that context, but for rigidity, this is a really useful way of thinking about things. You've got all these columns-- d times n of them. You want to obliterate all the degrees of freedom you can, and leave just just d. That's a useful way to think about things, especially if you're trying to make a point about something that's really important to you, like the way you think about the world. three of them in two dimensions-- d times d plus 1 over 2 in d dimensions, and you do that by adding useful edges. And useful edges here means that the rank is high, which essentially means none of the rows in this matrix cancel out with each other. So this is a matrix with a rank of high, and the rows are all in the same direction. This is a two-dimensional matrix with three rows and three edges in each dimension. The rows are placed in the order they appear in the matrix, and there are no rows that cancel out. it's another way of thinking about essentially everything we've seen. And if you know linear algebra, it's useful. Otherwise, I'll tell you how we can use it. OK, one mathematical thing we can do is give another definition of a generic point set. Last class we talked about one definition. Last week we discussed one definition, this week we're going to talk about another definition. We'll talk about how to use this new definition of the point set in the next class. of generic, which was that you forbid all non-trivial polynomial or algebraic rational equations on your points. This definition will be easy to think about if you're used to linear algebra. So for some, it's an improvement. For others, it may not be as good as the previous definition. For more information on the new definition, go to: http://www.algorithmtoday.com/definition/ generic-of-generic-ofÂ generative. it might be the reverse-- whatever. But at least this definition is finite, which I like. OK, for this definition we need the notion of a minor. So we have some matrix. Actually, our matrices are pretty rectangular. And I just choose, let's say k columns from the matrix, and I choose k rows-- the same number of rows and columns. That's a square matrix, that's a minor-- that 3 by 3 square submatrix is called a major. So there's a whole bunch of minors, but it's only finitely. many. It's exponential. You take all the minors of your rigidity matrix. And here I'm imagining the complete graph, so there's tons of edges. There's n choose two edges. So this'll be independent linkage. You could do it specific to the linkage, but it's better. But it's not easy to check. You have to do it for the whole graph, not just a few edges. That's what I'm doing. I'm trying to make a graph that looks like a graph. to do it for the complete graph. Then we take the determinant of that matrix, which I won't define. It's a number associated with that matrix. And if it's non-zero-- now remember, rigidity matrix is defined as a function of C. It depends where you put the vertices. So what does that mean for the graph? We'll find out in the next section of the show. Back to Mail Online home. back to the page you came from. I'm saying is if it's non-zero for some choice of C, then it should be non-heroic for this choice. And if you find such a configuration C-- or I guess we call this a realization C-- then that C is generic. So if I gave you a specific C, it would be generic if it was used in a specific way. But if it wasn't used, it wouldn't be generic, and that's what we're trying to do. configuration, you could, in principle, in finite time-- it won't be efficient-- you could check all of these things. And say, oh, I compute out, I work out what the determinant of that submatrix is, that minor. It's some algebraic function. If it doesn't cancel out entirely, if it's not, you're not doing it right. You're not going to be able to do it in a reasonable amount of time. But you could do it. zero trivially, it's not zero always, then I just evaluate it at this configuration. And if it's non-zero there, good. That's generic. So it'sNot useful in a computable way, but it's a definition. It's a little bit nicer. And now there's a bunch of fun facts about infinitesimal motions. And there's also a lot of information on how to use it in a computer program. So that's a bit of fun. and rigidity, and the relation to the generic case. So there as we have before, this definition is not quite the same, but it's effectively the same as the last one. Almost every configuration is generic. So maybe I should say realization-- whatever. I take some point set-- I takeSome point set -- I take Some point set, I take Another Point Set, I Take Another Point set, and so on. And that's the way to look at it, I think. Some random points are assigned to each of the vertices. With probability 1, it will be generic according to this definition. That's really obvious if you know linear algebra. But here's what's really cool-- if we take any of these generic configurations-- so just fix it. It will still be generic. It's just a different way of looking at the set of vertices that are assigned. It doesn't have to be the same way every time. It can be a new way to look at the same thing. one-- rigidity is the same thing as infinitesimal rigidity, is theSame thing as generic rigidity from last class. Wow, this is cool, because if I care about any one of these three things, I just have to pick my favorite generic point, which I can do randomly. I can. Do you have a favorite point? If so, please share it in the comments below. If not, please send it to me via e-mail at jennifer.smith@mailonline.com. just take a random point, and if I can evaluate any one of these three things, I learn about all the others. If you chose it right, which you will do at probability 1, then that will tell you whether the graph is generically rigid. You see is it 3 n minus 6, and that willTell you whether that generic realization is infinitesimally rigid. So when when you take a 3D graph, you compute the rank of this matrix generalized to the 3D case. I said last class generic rigidity in 3D is hard, it's hard in the sense we don't have a deterministic algorithm, but randomized-- super easy. Choose a random configuration, check the rank of the rigidity matrix-- done. So that's kind of cool. And that's why this infinitesimal rigidity stuff is so cool. It's like a super easy way to make 3D polygons. And it's super easy to do it in a random way. so important, because it's so easy algorithmically. Things become a lot easier. Let me draw you one example just to show what happens at non-generic points. I've actually drawn this example before. These three points are collinear. And you can work out there is some effect on the shape of the point. So here's a non- generic point. And we can see that the shape is a little bit different from what it would be if it was just a straight line. minor that is 0, but shouldn't be. We have a rigid triangle here. So these two points are pinned relative to each other. And then this thing is taut, so it can't move. But to the first order, it is rigid, because we have rigid triangle. It's a taut triangle, but it's rigid because it's taut. It has a rigid point, and it's pinned to the other point. It can't be moved. It is rigid. It doesn't move, because it has rigid points. can move. And it's allowed to move straight up or down-- anything perpendicular to this segment. That's always true. If you take a segment, and you move one vertex but not the other perpendicular to the segment, that's a valid infinitesimal motion. Why? Because if I project this onto the surface, it will look like a point on the surface that is perpendicular to that point. That is a valid motion, and it can be used to make a point. segment, I get 0. So this length is not changing to the first order. And this is really necessary. To the first Order, you can't really distinguish this guy actually moving up, and therefore getting slightly longer. This guy moving along a circle centered at that point, which is 0. The first order is the length of the circle. The second order is how long the person is moving up or down. The third order is what you get when you get to the end of the segment. a valid motion. To the first order, they look the same, because you're going straight up or down in first derivative. OK, here, to the first Order, you can't realize the fact that if you'reGoing to go on this circle and you're Going to Go on This Circle, you. can't go straight up and down in the same way. You have to go in a different direction. You can't do it in one direction and the other in the opposite direction. get a contradiction. But it's pretty accurate. And if you perturb this example, infinitesimal rigidity will give you the right answer. That's the more technical part of the lecture. Question? STUDENT: Will [INAUDIBLE] be square matricies? PROFESSOR: There's a motion, there's always an infiniteimal motion. That example is rigid, but notinfinitesimally rigid, so it's sort of strict. OK so far? The rigidity matrices are almost never square. The minors are going to be square, because we told them to be. But I think typically, in the ideal setting, we're going to have d n columns. And we're supposed to have 2 times n columns in two dimensions. But we're not supposed to do that, because that's not what we want. We want 2 times 2 columns in 2 dimensions, and that's what we get. We don't want to make the minors square, so we don't do that. to have 2n minus 3 rows. So it's close, but in general, they should differ by about this much. So they're almost square, actually. STUDENT: You can add [INAUDIBLE]. PROFESSOR: You could always add extra edges and make it square, yeah. Student: [inaudible] You can always addextra edges and made it square. PROFessor: Well, no. So you can't do that, actually, because it's not square. that's another good question. What happens if I add more edges than this many? The rank just won't go up. Any edges you add will add redundant constraints, and so the rank can never go above this value. You need at least this many edges to get there, and we know we can get there with that many edges, but only in the minimal rigid case. You could make it a super-tall matrix if you want, but you're not going to increase the rank. Tensegrity comes from tensional integrity, which is a very Buckminster Fuller term, and he invented it. I don't need the rigidity matrix any more. TenseGrity-- so this is in some sense an extension of rigidity theory to a whole other theory called tensegrity theory. Go over here. Go to the next page for the next part of our interview with John Sutter, the author of the book, "Rigidity: The New Science of Rigidity" don't think he invented tensegrities, but he invented the word. And they are things like this-- here's a tensegrity built and given to me by Bob Connolly. And it has well, I guess, there are three kinds of edges physically. There are the springs, There are these struts, and there is the edge. And there is a tension. It is a kind of a tense. It's a sort of a tension of the body, a tense of the mind. are these wire cables. And its rigid. It's a little flexible, just because the springs aren't perfectly stiff, like all springs. But there are three kinds of edges here, and we're going to model the three kind of edges. The edges that we've modeled so far are most closely related to the ones we're most interested in. We'll show you how to do it in the next episode of "This Is Life" at 8 p.m. ET on Sunday. to these springs, so that's not quite the right physical analogy. What I would call the edges and linkages is bars. Bars are, like, solid attachments, like steel rods that are permanently attached to the two endpoints. The lengths of these edges should never change. That's been the world we've been living in for the last 100 years, and it's still going to be the way we live for the rest of our lives, I think. I don't think it's going to change any time soon. live in, at least to the first order, whatever. Edge lengths of bars should never change. Now we have these cables. Now cables really can get shorter. But what it prevents is getting longer. I can pull those two vertices together. But I can't pull them back together again. This cable is perfectly happy to get shorter, but it can't get longer. If you want to make it longer, you have to change the shape of the cable. You have to make the edge of it longer. I pull-- you can't tell, but I'm pulling really hard on these vertices apart. Nothing happens, because this cable can't get any longer. So cables prevent extension, but they do not prevent compression. If I push on these two vertices, they don't have to go any further. Struts, on the other hand-- they prevent compression, so they prevent extension. If you want to extend your cable, you have to extend it. You can't extend it if it's already too long. get any closer. If I pull, it comes right out. And you have to realize that these are eye hooks, and so really, those could come apart. All these struts are preventing is compression. They don't prevent expansion. So that's the thing we want to model. This is a tensegrity. We don't want it to get out of control. We want to make sure that it doesn't get to the point where it can't be controlled by the user. It's a generalization of a linkage and where we allow three kinds of edges. It can be a bar-- and this is the old case, which is that the length is fixed. We can have cables, which are the length can decrease, but it can't increase. And there are struts, which can be fixed or can be moved by the user. It's a new way of looking at the world, and it's going to get better and better over the years. which are the reverse-- you can increase but not decrease. Seems like a useful generalization, especially because people build things they actually use struts and cables. Like you look at most bridges-- tons of cables around. I think I have an example here. There's this guy, Ken Snelson, who makes this guy who makes struts for bridges. He makes tons of struts. He's a great guy. I love him to death. I'm glad he's my friend. a whole bunch of cool tensegrity sculptures. This is a particularly tall one in Washington, DC that I saw a couple years ago. That's to give you an idea of height. And there's this really cool view if you stand -- here's a person. You stand in the center, and you're in the middle of the sculpture. And you're there for a few seconds, and then you're out of the center. And it's a really cool thing to see. look up. It has this really cool, sixfold rotational reflectional symmetry. I could stare at this for hours. So we want to understand those structures. This one's also rigid, hopefully. It's been standing for 40 years. So what can we define in this one? I think that's just the [? zoom ?]. It's a really cool one. I can't wait to see what it has in store for us. I think we're going to have a lot of fun. this generalized setting of tensegrity? We want motions. We want generic rigidity. All the good things we've defined, hopefully, carry over to this. Well, all but one of them carry over. OK, we can define a configuration space. It's going to be a little bit more rigid than this, but it will be better than this. It will be a lot more rigid. It'll be more like this. We'll see how it works. We're going to have to wait and see what happens. be a little smaller, or a little different from our old configuration space. It's a space of all possible configurations where these three things hold-- give you desired lengths for each of these things. As long as these constraints hold, that the lengths stay the same here, get smaller here. For example, if you want to make your computer bigger, you can make it bigger by adding a few inches to the top of the screen. You can also add a few extra inches by making the bottom of the page smaller. or the same, or stay the same or get larger here-- that's a valid configuration. So it's actually a slightly larger configuration space than what we had. A path through that space is going to be a motion, just like before. Configuration is just a bunch of points where this this or that is a valid motion. That's what we're trying to do here. We're not trying to change the world, we're just trying to make the world a little bit better. There's no notion of generic rigidity. For example, this is a generically flexible linkage. We all know it. Now I take my yellow chalk and add struts. Maybe I'll put some arrows on it to make it more obvious. These are things they they say they want to do, but they can't do it. The problem is, there's no concept of rigidity in the first place. It's a very, very difficult thing to do. It takes a lot of work to get it to work. can expand, but cannot contract. Then this configuration is rigid or flexible? Flexible, yeah-- this is a one degree of freedom linkage. If you move this thing in a particular direction, indeed, this increases and that increases. Check it. The white part is aOne degree offreedom linkage, and if you move it in a certain direction, this increase and that increase. This is a One degree of Freedom Linkage, and it increases when it is moved in a specific direction. This one is rigid. The only way to move the square -- or any generic convex configuration -- is one of these pairs has to get shorter. The other one will get longer, but one of them will get short. So this is the same graph, and the same labeling. It's the same general shape. It doesn't change. It just gets shorter and shorter. And that's the only way you can move a square or any other convex shape. That's the way it works. of which edges are bars and which are struts, but in one configuration it's flexible. The other it's rigid. So we lose generic rigidity. But infinitesimal rigidity still works, and generic configurations are still meaningful. It's just that they're not all the same. There's not, in this case, for four. Thereâ€™s not, for example, for a four-piece set of bars and struts. But there's not for four struts and bars. vertices, there's two kinds of generic configurations. So it makes life a little harder. But let's say this part will work well. So why don't I be clever, erase this part. So this is the idea of an infinitesimal motion. of a tensegrity. Well, I want to take the same approach to this part of the movie. I want it to look like a scene from The Godfather. So I'm going to make it look like that. dot product, and I claim this is really measuring-- it's a number, and it's measuring the sign's change in length of that edge. So if C of v minus C of w dot product with d of v plus d of w is greater than or equal to 0, that's a good sign. That's a sign that the sign is changing in length, and that's what we're trying to measure. It's not a sign of something that's going to happen in the future. the property I want for struts. That says it gets longer or stays the same to the first order. Now of course, in reality it might get slightly shorter, but not in the first derivative. And it should be less than or equal to 0 for cables, and should be the same as 0 for the length of the cable. The first derivative is the length that is equal to or greater than 0. The second derivative is that the length is the same or less than 0, and the third derivative is 0. equal to 0 for bars. So that's the new notion of infinitesimal motion. Now, this is no longer a linear system of linear equations. I can no longer write this as a matrix times a vector equals 0. But this is this more general thing called a linear program, where a matrix is a vector and a vector is a matrix. That's what we're trying to do here. It's a new way of looking at the universe. We're not trying to make it bigger or smaller. We just want it to move. I have linear equations. I also have linear inequalities. So in fact, I can write it as some other matrix R prime. Actually, it's the same matrix. R prime times d is greater than or equal to 0. This is the general form of a linear program. And you can do the same thing with any other matrix. You can do it with any matrix. It's just a different way of looking at it. It doesn't have to be the same way as the other one. write an equality constraint in this world just by taking it and its negation, setting both of them greater or equal to 0. That forces them to be equal to zero. All you need to know is it there are fast algorithms to solve this, also. So if I give you an equalityÂ constraintÂ in this world, you can write it in the same way. If you give me a constraint, I can write the same thing in the opposite way. You can do this by taking the equality constraint and itsÂ negation, and setting them both to 0, and then setting them to equal to 1. you a tensegrity in polynomial time, you can tell whether there is a valid infinitesimal motion that does all things you want on the struts, cables, and bars. Cool, questions? STUDENT: [INAUDIBLE] PROFESSOR: This R-- this is some matrix, and this is your vector of all the d's. Student: Right. Professor: You can tell if there is an infiniteimal motion, and if so, what it is. And saying that it's greater than or equal to 0 [INAUDIBLE]. PROFESSOR: Oh, that means element lines, sorry. You take a matrix times a vector. You get a big vector. This is a vector of zeroes. I should have said that. And it's just saying every element in the vector. It's not saying that every element of the vector is equal to zero. It just says that it is greater than, equal to, or greater than one. is greater than or equal to zero. So it's just a fancy way of rewriting this stuff again. But this is what we call linear programs, and that's what's solvable. STUDENT: And that's just for struts, then? PROFESSOR: Well, for cables you could just negate the left-hand side. And then negate the right-handside, and then negate. and negate again, and so on, until you get to the end of the program. that's greater than or equal to zero. For bars you have to include the same left-hand side and its negation. Yeah, I'm skipping some steps. That's why I had to write R prime-- it changes a little bit. How many people know about linear programming? OK, about 2/3, so for bars you must use R prime. That means you must include R prime on the left and R on the right. You have to use the same R on both sides of the bar. you guys, you also know that there's this thing called linear programming duality. If you have a linear program, the first thing everyone should do when they have alinear program is take the dual and see what you get. I'm just going to tell you what youget. But I'm not going to say what it is. But it's going to be a little bit different than what you're used to. It's a little different than a regular program, but it's the same thing. that's the next trick I want to pull. So dual notion-- essentially what prevents you from solving that system-- in other words, what makes something rigid-- is something called equilibrium stress. So stress, for me, is just a real number assigned to every edge. And here I'm going to use stress, which is a number that can be assigned to any edge. That's what I'm trying to do here. I'm using stress to solve that system. I think that's what's going to happen. the word edge to mean bar, strut, or cable. So a real number s of e for each edge e, and have to have three properties. If I have a cable, then that number should be non-negative. IfI have a strut, it should benon-positive. If i have a bar, then I should have an edge with an edge of bar or bar of bar. If   Â IÂ haveÂ aÂ cable, then my edge should have a edge of cable or cable of cable. bar, I don't care-- could be positive, or negative, or zero. And then there's the equilibrium condition, which is that if I take the sum over all vertices w, where v w is an edge, the weighted vector C of v minus C of w-- so I forgot to mention, could be negative, positive, zero, or positive. I'm sorry, I didn't mention that. I was trying to think of something else to say. I'll be back in a minute. we're assuming we have some configuration of our tensegrity. This is the zero vector for all vertices v. Let me draw a picture. I'll draw a real example, how's that? Here's a rigid linkage. I'm not going to say yet which edges are struts and cables. In some sense, I'm saying that in some sense it's the same thing as a rigid structure. It's just a different way of looking at it. I don't think it's that bad. can do that later. And I'm going to put numbers 1 along all the outside edges and the numbers 3 along the inside edges. And then if you work out what this is saying, I'm taking the vectors. So I take this vector. I multiply it by 3. It's all multiplied by 3 in this case. And so I'm looking at each vertex like this one, and saying OK, well, I take all of the incoming, whatever. Let's think of all the edges incident to that vertex. I weight them by this number. gets three times as long. Take this vector, multiply by 3, this vector multiplied by 3. I should get the zero vector. And if this is really an equilateral triangle, I will get thezero vector, so that's good. And I'm going to draw arrows here here. It's going to look like a triangle, but it's actually a circle. It has three sides. It looks like a square. It appears to be a triangle. It seems to have three sides, so it must be a cube. to signify what this means intuitively is that this edge is pushing with a really big arrow. This is an arrowhead of size 3. Try to draw it to scale. Then, of course, this vertices will not move subject to those forces. These forces balance out. On the other hand, this guy, I have these edges of weight negative 1. That means it's going to pull, and it'sGoing to pull with the arrow head of size 1. OK, and I claim also that these vertices do not movesubject to those three forces. How do you check that? The proper way to check it is to draw what's called a force polygon. Those who have done structural engineering know this. So I take, let's see, there's this vector, which is length 3 times that, so it would be something like that long. And let's say I'm pushing in that direction, and let's says I'm going in that way. And I get a force of 3 times the length of the vector. That's what I'm trying to do. so I go there. Then I follow this thing with the weight of 1, but in sort of the opposite direction, so it will be like this. This is my attempt at copying that edge length and getting what I want. And then the other force is this one. It. It's my attempt to copy that edgelength and get what I wanted. Itâ€™s a bit of a challenge. Iâ€™m not very good at it, but I think I can do it. doesn't actually matter which order I do these in. And if I end up back where I started, that means the total force is 0 as a vector, and so this vertex is stationary. That's the force polygon. It's a geometric condition, if you like. So you can just check this. And it's the same for the other vertices as well. So it doesn't matter what order you do them in, it's just the order they're done in. will, that each vertices is stationary. That is the notion of being in equilibrium. And this is just the algebra to write that down. Now what the heck does this thing mean intuitively? If your tensegrity is going to be rigid, somehow the edges can prevent a motion. And intuitively, that is what this means. And it's a very simple idea. It's just a way of saying that the edges of a graph are stationary. And that the vertices are not moving. what that means-- I'm going to say this right-- so this is like an edge pushing really hard away from itself, against the vertices. That's like a strut. A strut prevents compression. So that the force that it can actuate effectively is an outward force. Whereas cables prevent extension, so that's what this is all about. It's about pushing away from the edge, pushing against the edge. That is what a strut does, that is what cables don't do. they can sort of pull back, say, no, you can't get any longer. I'm going to pull towards me. Now bars can do both. That's why there's no constraint on bars. But assuming I've got this right-- and I didn't. I got it backwards. Minus 3 plus 1-- it's symmetric so it doesn't matter in some sense. But the intuition matches when cables can pull, and struts can push, and bars canDo both, because they prevent motion in both directions. say you're rigid if and only if you have an equilibrium stress. But that's not true. Let me tell you what is true. So this is duality. This goes back to Roth and Whiteley, 1981-- good year. So let's see, here's what's true-- if I look at all the equilibrium stress, I find that I'm not rigid. I'm more flexible than I think I am. I think that's a good way to look at it. stresses, and I find some stress that is non-zero on a particular structure or cable. There's always a trivial stress, which is you set all of these S's to zero. So what we're interested in are nontrivial stresses, where you're nonzero somewhere, and that's where we're trying to find the stress that we're looking for in a cable or structure. We're looking at stress that's nonzero in some way, and we're going to try to find that stress. the interesting case is when you're nonzero on some strut or cable, let's say. So if there is such an equilibrium stress, then it's not quite the case that you're rigid, but you are rigid on that edge. Every infinitesimal motion holds the length of that edge fixed. So this is this is the interesting case. It's not a case of being rigid on one edge, but rigid on the entire edge of a cable or strut. That's the interesting part. a strut or a cable. It could get longer or it could get smaller, depending which case we're in. But if there's a stress that's nonzero on that edge, then in fact, it can't change length at all. It effectively acts like a bar in this configuration. That's what this configuration is for, and that's why it's called a bar. It's a bar, not a strut, and can't be shortened or lengthened. It can only change length when there's no stress on the edge of the bar. theorem says. And these are equivalent. If you want to know can I possibly make the strut any longer? You just see can I find an equilibrium stress for that thing that's non-zero? Another thing you can say-- almost equivalent to this or a consequence of that-- if I have this or that in my head. If I have these things in my mind, I can say that I'm going to do this or do that. And I can do both of these things at once. some tensegrity, and I want to know is it infinitesimally rigid, that is the case if and only if two conditions hold. One is that every strut or cable is nonzero in some stress-- in some equilibrium stress-- and I'll say the corresponding linkage is rigid. So all this is all this in a way, but it's not rigid, because there's no such thing as a rigid linkage. It's just a way of saying that something is not rigid. saying is if you can find a stress that is nonzero on every particular strut or cable, then all of those things are effectively bars. So you can convert your tensegrity into a linkage where all the edges are bars. And then it's just a matter of testing rigidity or strength of the linkages or cable or strut or whatever. It's all about finding the right stress levels that are nonzero and then you can test for rigidity and strength of linkages. infinitesimal rigidity of that linkage. So in some sense, we already know how to do all of this, because this is just a linear program. We can solve it. But this is a more intuitive way of proving this. If you want to prove this, you can do it in a very different way. You can do the same thing in a different way, but it's still the same result. It's just a very, very simple way to do it. want to prove to someone that tensegrity is infinitesimally rigid, you give them a bunch of stresses, one for each strut or cable, or maybe you just need one stress to hit all of them. And then you show that the linkage is in fact rigid, which you could do by giving them a stress for each of the cables or struts they are attached to. You could do this by giving the person a stress on each cable or strut, or even just one stress on the whole thing. computing the rank of the rigidity matrix. Strut can have zero stress-- the weight is zero. OK, let's keep going. Lots of a cool things to talk about, maybe over here. I want to do a little diversion for fun, something called spider webs, like this. You might have seen this one before, but it's fun to look at. It's a spider web, and it looks like a big spider. It looks like the shape of a heart. them before. A spiderweb is something where every edge is basically a cable. You can see under wind and tension, they get a little bit shorter than they're supposed to be. But they can't really get longer. They are pretty strong at preventing expansion. So a spider web is something that is very, very strong. It's something that can't be taken for granted. It has to be protected from the elements. It can't get too big or too small. It needs to be just the right size and shape. can be stressed with all positive weights. And the reason it holds in tension-- positive, yeah, cables-- all of the edges can have a positive stress, and it will be in equilibrium. And in spiderwebs, in fact, this is the same-- these two-- rigidity and positive stresses are the same. It's the same in spider webs, too. And it's the reason they're so strong. They're very rigid. They can't be broken. They have to be held in tension. thing. This is sort of a special case, and Connolly studied these in 1982. There's some special points in a spiderweb. Here they're kind of off the page. Those guys do not satisfy equilibrium, he says. "There's a point down here where it attaches to something, and up there, and. up there. Those guy do not satisfies equilibrium, those guys don't satisfy equilibrium," says Connolly. "Those guys donot satisfy equilibrium." "There is no equilibrium," he says, "and that's a good thing." or you can say those edges have some negative stresses. Or another way to think of it is there's a point off to infinity, which is how this is drawn, and you can have a positive stress. And at infinity, you don't have to satisfy equilibrium. There's a little something special at the boundary, but everywhere else-- interior and all these vertices in here-- you have equilibrium, and all the stresses are positive. And it turns out in this case, you're automatically infinitesimally rigid. This is a brand-new result from this summer at [? OSMI ?] by Robert Lang and Alex Bateman. Here's a little example of an origami tessellation, this fold. This fold is a fold of this fold, and this fold of that fold. The result is a tesselation, which is a folding of a tesseract. The tesselations are made by folding a piece of paper over another piece of folded paper. The origami is called a "tesselation" and is a type of folding. "It looks pretty cool. You don't see the light. It's folded from one square," says Ramsier. "It looks a little cooler that way," he adds. "I can see it great," Ramsier says. "You don'tsee the light," he says. 'It lookspretty cool. It looks like a little piece of art' "It's just the one I had hanging around in my office," he said. "Let me hold it up to the light, I cansee it great" it's folded in some sense with a regular pattern. You can see regular hexagons, hexagonal pattern. And these guys have been around for a long time, probably at least the '60s, maybe earlier. A lot of Japanese artists, lot of American artists. And there's been a lot of excitement about them. It's a very exciting time for the art world, and for the artists who are making them. They're very, very exciting to make, and they're very special to the art community. origami tesselations since the mid '90s. I think Chris Palmer revitalized them, and then tons of people are looking at them. And there's this cool algorithm for building them. So you take some tessellation like these squares, and triangles, and hexagons-- some collection of polygons. You shrink all of them. Then you have a tesselation that looks like this. And then you can add more polygons to it if you want to. a little bit, but all by the same amount. So here they are twisted. And then you just connect the dots. So these two edges used to be joined to each other. So I'm going to connect these edges. All the same size. All of them are twisted the same way. So they are joined. And I'm connecting the edges together. I'm linking them together. So that's what I'm doing. That's what you're doing, too. You're doing it too. guys, and connect these guys. That's the green edges. And that's your crease pattern. You erase the red stuff, and you get your creased pattern. And when you fold it, you get this cool tessellation-- magic. Now the question is, when does this work? This algorithm has been around forever, and it's been used for decades. It's been called "the crease algorithm" and "the fold-and-eat algorithm" as far as I know. I don't know exactly how old it is, or who invented it, but it's pretty natural. It's how most tesselations are folded. But when does it work? And there is a brand-new result from the summer that it works for some choice of those angles. I'm not sure if this is the first time this has happened, but if it is it's a pretty neat trick. I've never seen anything like it before. So I had some flexibility-- how much do I shrink and how muchDo I turn? But this will work for some choice of turn and shrink amount, if and only if your graph or your initial tessellation is a spiderweb. Pretty cool-- spiderwebs have this neat property that you can shrink and turn them at the same time. You can do this by turning your graph at the top of the page and then turning it at the bottom to shrink the page at the right time. can do the shrink and twist tessellation algorithm, and it works. And here is an example of that-- a spiderweb, so to speak, but drawn visually. And this is actually a proof that-- these are basically all the force polygons showing that you can get a positive equilibrium stress. And it's a proof of the fact that the algorithm works, and that it can be used to create a web of web-like polygons. It's a very simple idea, but it's very powerful. you turn it into a crease pattern, fold it flat, and it works. This is, of course, in simulation, but you can really fold these things, and they work. So that's kind of fun-- a little bit origami out of linkages and tensegrities. Questions? All right, then we move on. We'll be back next week with a look at the next episode of "This Is Life with Lisa Ling," which airs at 9 p.m. ET on CNN. I want to tell you one more cool thing about stresses and tensegrities-- yet another characterization of stresses, which is polyhedral liftings. A polyhedral lifting is going to work if I have a non-crossing configuration. So I don't want to have this-- two edges that cross each other. I only want to be able to have one edge that crosses over the other. That's what a stress is, and that's why it's called a stress. It's a stress that can't be crossed over by another stress. want to have pictures like this, where edges don't cross each other. They only share endpoints. Then I can define what's called a polyhedral lifting. So this is a planograph, if you will. Polyhedral lifting is going to be an assignment of z-coordinates to the vertices. So it's going to look like a polyhedron, with vertices and edges. It's not a sphere, it's a sphere with edges, vertices, edges. be a z-coordinate z of v for each vertices v such that each face remains planar. Because I forbid crossings, I end up decomposing space-- the plane here-- this only works in two dimensions. This is one thing that does not generalize to arbitrary dimension. So I get a bunch of different ways of doing it, which is a bit of a pain. But it's a good exercise for a few minutes, and it's fun to see how some of the ideas work. of triangles here. I want to assign some z-coordinate to each of these vertices, such that each ofThese triangles remains planar. Well, actually, that always holds. Triangles are always planar, but there's another face, which is the outside face out here. That's a problem. And so I want. to lift. some of the triangles here, such as the one on the right, to make them planar again. But there's also a face on the left that is not planar at all, and that's the problem. In general, you're going to have a lot of non-triangles. Those should all remain planar. That's a lifting.quadrilateral. So these four vertices have to be lifted onto some plane. This guy can be lifted however it wants in this particular picture. That one also has to remainPlanar. This one can't be lifted on a plane. It has to be a lifting quadrilateral. That is a planar quadrant. That has to stay planar, too. thing you can do-- there's some freedom here. If you have any lifting or, for example, you could not lift them at all. Set all the z-coordinates to zero. That's fine. You could also just lift everything onto some other plane, and generally have a rigid motion of freedom. You. could also simply set everything to zero, and that would be fine too. That would also be fine, but you could also. just lift all of it onto another plane. can't translate around, but you have one two-degree two-rotational freedoms, I think. And so we would just like to get rid of those. So say remove rigid motions by forcing the outside face to lie in z equals 0. So let's say these guys all stay at 0, so in in the world. So in the real world, we would be able to do this. We would just have to change the shape of the face to make it less rigid. this particular example, this guy can go to any value, positive or negative, but that's it. Now, this is a lot like stresses-- in fact, it's identical to stresses. It's probably not obvious, but just like stresses where you could set everything to 0, here you can also set everything at 0. This is an example of how you can use this technique to create a stress-like state in your brain. It can be used to create stress in a variety of ways, from positive to negative. Maxwell-Cremona Theorem is probably one of the oldest theorems we will cover here-- I guess anywhere. It turns out they really are the same thing for non-crossing configurations. It's not that old-- 1864. That might be the age of this article. It is called Maxwell-Cre monona theorem, or Maxwell-Mononova Theorem, and it is based on the fact that the two types of configuration are always the same, even if they are different.  Maxwell proved this, or claimed it in 1864. Theorem is there's a one-to-one correspondence between the equilibrium stresses and polyhedral liftings. negative stresses correspond to valleys. So valley is something like this. You know what valleys are, but it's maybe a little bit subtle. We're not. We don't have to explain it to you. We just want you to know that it's possible to do it. It's called the Maxwell's Theorem, and it's one of the oldest. folding all the way here, so this would also be considered a valley, because it has sort of negative dihedral triangle. It's really hard to see. What I meant was something like this. That's a valley edge here. This is another valley edgeHere-- whatever. A positive stress corresponds to a valley. A negative stress corresponds with a valley or a negative stress. A valley is a valley with negative stress, and a positive stress means a valley without negative stress or negative stress in the same place. a mountain, which is the same picture upside down. A zero stress corresponds to a flat angle-- doesn't have to be horizontal, but it has to be flat. So it could be like this. I'm going to need this in a moment proving the next thing. I don't think I'll need it right now. I'll be back in a few minutes with the next part of the story. I've got a lot of work to do, but I'm not going to let this stop me. Tensegrity.prove this theorem, but it would be fun to actually see it in action. I've never seen it implemented, so another fun project. You compute an equilibrium stress, which is easy to do by linear programming, and draw-- you can directly construct from that the 3D. Theorem: You can directly create a 3D model of a stress by computing the equilibrium stress and drawing from that. Theorems: It's easy to compute, but hard to draw. lifting, which would be kind of cool. I'm going to use basically everything I proved today to prove a big theorem. It's why I'm wearing this t-shirt that has nothing to do with the Carpenter's Rule Theorem. And it's about non-crossing linkages. So this is the first part of a two-part series. The second part of the series, on Thursday, will focus on the second half of the show. The third and final part, on Friday, will be on the fourth and final section, on the sixth and final page. beginning. So far we've been allowing crossings, except for this very last theorem. Now we begin this section where I forbid crossings between the edges, just like what that picture was. Prevent this, and this is a constraint on the configuration space now. I'm going to look at all the all the different ways that this can be done, and I'll show you how to do it in the next section of the book. We're going to start with the first section, and then we'll move on to other sections. configurations where no two edges cross. This is a smaller version of our old configuration space. I'm not going to define it formally. It's still defined by polynomial inequalities. Question? STUDENT: What if you have one of those diagonals and switch it? It's a bit messy, but it's not too nasty, I'm sure it'll work. I'll be back in a week or so to show you what I've done with the new code. to be in relation to each other [INAUDIBLE]? PROFESSOR: You want this picture and-- STUDENT: Either one. PROFessor: And you want to add this? Or-- that's crossing-- not allowed. Whatever you're saying is not allowed, that's the easy answer. I don't quite know what it is, but what we allow is not what you're talking about, I'm sure you'll find out soon. I just want to make sure you know that. and in this case I'm just thinking about linkages for the moment. It's just you can hinge at common vertices. Two edges either share a vertex or not. And that's it. But they're not allowed to touch anywhere else. And now what we care about is something called a locked linkage. And this is what we're going to talk about in the next section of this article. Back to Mail Online home. back to the page you came from. The first part of the article was published on November 14, 2013. linkage. And a linkage is locked if its configuration space is disconnected. So the configuration space would look something like this. Maybe it has three components. If I have some configuration here, I can move to any other configuration here. And same over here, but there's no way to get to the other one. So there would be a configuration space for each of those components. And it would look like the following: A configuration space could look like this: A. Configuration space could have three components, and it could have two other configuration spaces. from this configuration to that configuration. They're disconnected from each other. So this would be kind of sad news if you're looking for motions. It means you cannot get from everywhere to everywhere. There are some locked configurations that cannot get back to start. However you define start and locked, you can't go back to the start button. You have to go to a different part of the system to get to the same thing again. You can go to the different part by going to the menu bar and going to 'Configure' doesn't matter, but the linkage is locked when there's two things that cannot reach each other. And the Carpenter's Rule Theorem is about one case of that. So this was essentially my Ph.D. thesis, so paper in 2000 by Bob Connolly who made that tensegrity, [? Gunta ?] [? Rota?]. And it was basically my thesis as well as my master's thesis. So it's a little bit of both. It's a lot of work, but it's all worth it. ] and me. And it says that if we have a linkage, and say we take a configuration of that linkage. And let's say it's of maximum degree 2, so every. vertex has at most two edges coming out of it. Then there's a motion of that. linkage that straightens that linkage, that straightened. me. and me, and it says we take that configuration and straighten it. and it straightens us. and straightens. us, and we straighten. us. out-- so if you have maximum degree 2, you have paths, and you might have some cycles. You might have many of them. And it's going to straighten all the paths and convexify all the cycles. But before I get to that, this is essentially showing how it's also expansive. It's also going to show how it convexifies all of the cycles, as well as how it straightens all of those paths. It is going to be very expansive. that these configuration's bases are connected. It doesn't quite imply it the way I've worded it. But for example, for paths, I take some path. I want to know, can I get from this configuration to some other configuration? Well, I could take this one, find a motion that straightens it. That's what I'm trying to do here. I don't know if that's the right way to do it, but that's how I'm going to try it. the chain. I could take this one, find a motion that straightens the chain. So here I've drawn it straight. I apply it forwards. I take this motion. I applied it backwards, and I get from here to here. So if I can straighten all the all the way, I can get to the end of the chain, which is here. That's what I'm trying to do. I'm not trying to make a point, I'm just trying to get the chain straight. For convex cycles, it's a little less obvious, but it's also true. There's one catch which I didn't say here. I need to add outermost.paths, I can definitely get from anywhere to anywhere. When you have nesting like this, you're in trouble. This guy is not going to get out of this one. He's going to have to work hard to keep his head above water. He'll have to keep working hard to stay on his feet. He won't be able to do it. straightened out. It could be super long. It may not have room to straighten out inside that convex chamber. So these guys will come along for the ride, but they won't actually get straightened. The outermost guys will get straightening and convexified. The other fun property-- and this is how it will be done. It will be convex and it will look like a big, open space. It's going to look like an open space with a lot of windows. we actually proved the theorem-- so this was open for a long time. People thought this was true. And the key to proving it is by making the theorem stronger, which is that all pairwise distances between vertices increase or stay the same. Some of them have to stay theSame. Some have to increase or decrease. Some must stay thesame. Some can't be changed at all. That's what we proved. We proved it by making it stronger. And that's how we proved it. same, because they're edges. They are bars in there. They can't change in length. But everything else will increase. Now there's a couple reasons why this is useful. One is that it says you don't have to worry about crossings. If I have some edges that initially don't cross, and if they eventually do, it's a good idea to change the shape of the edge to make it easier for them to cross. It's a bit of a trick, but it works. I'm worried about them crossing, that can't happen if you're expansive. One of them would have to get shorter. If I say, well, this distance has to increase, there's no way that this vertex is going to cross over that edge. So this essentially means that one of the two vertices has to be shorter. And that's what we're going to do. We're not going to make any changes to the geometry of the Earth. We just want to make sure that they don't cross over. says, everything's flying away from each other. That really makes life easier, because crossings are hard to think about. This lets you not worry about crossings. You just have to worry about distances. How do I worry about distance increasing? This lets me not worry too much about that. It's just a way to make life easier for me. I don't need to worry so much about crossing. I just need to make sure I'm not crossing too much. That's it. Tensegrities -- struts-- struts will force things to be expansive. So what we're going to do is build a tensegrity. And it's going to have a bar for every edge of the given linkage. So that's just the same thing. Once you build all this technology, which was existing, you can prove this theorem. And once you realize this is the theorem you want to prove-- this expansiveness. So we'regoing to prove thisorem in, like, five minutes-- easy. as we had given. It's also going to have a strut between every other pair of vertices-- heck, every pair of Vertices. That says that all pairwise distances must increase or stay the same. So this is a very different kind of structure than the one we've seen in the past. But it's kind of redundant for the bars, but every pair Of vertices. And it's going to be very different from what we're used to seeing in the real world. tensegrity. What I want to prove is that this tensegrity is flexible. If I can prove that it's always flexible-- well, until the end, which is when everybody's straight or convex -- then I'll have proved this theorem. So while this theorem is flexible, it doesn't mean that all the outermost guys are straight orÂ convexÂ or that they're all straight or Convex. It just means that they are all convex or straight. about actual connectivity of configuration spaces, it says paths and cycles have connected configuration spaces. You get from everywhere to everywhere. It even gives you an algorithm for doing that, which we'll talk about next class. We use just, is this thing rigid or flexible at all? And that's the question we want to ask ourselves when we're designing a new system. We want to know if it's flexible or rigid, and how we can make it more flexible. We'll talk more about that in the next section. power of all this rigidity stuff, just telling whether something can move a little bit, and then just doing that over and over again, you will be able to find that you can actually go all the way, and get to straight or convex. But how do we actually prove that? I don't know. I just want to know how to do it. I want to prove that I can do it, and how do I do it? I'm not sure. I'm just trying to prove it. this thing? So the point is, claim this tensegrity is infinitesimally flexible. And that will imply that there's at least an infiniteimal expansive motion. And then you have to use some fancy tricks-- not fancy, some tricks I don't want to talk about. You basically integrate that vector field, and that will give you an actual expansive movement. Let's not worry about that. The interesting part is show that at least infinitingimally, this tense grity moves a little bit. to show that it's flexible. But it's rigid if and only if this is true. This will actually always be true-- the corresponding linkage is rigid. Because I put in every edge is in there. If I turn them all into bars, this thing's not moving. It's not going to move if I don't put it in the right place. It will always be in the same place. That's the way it's always going to be. It'll always be the same. Stresses don't really matter. What matters is the stresses. Now stresses always exist. I could set all the stresses to be 0. But I claim actually that they don't exist.at all. If I want to show that it's flexible, not rigid, I want. to show these stresses donâ€™t exist. At all. So fact, this second condition doesn't really matters. Itâ€™s the stresses that matter, not the fact that theyâ€™re not there. pretty much all the stresses have to be 0, at least on the cables and the struts, which is what I care about here. So this will be implied by every equilibrium stress is 0 on all struts and cables. So you can never get 0, you can only get 0 on cables and struts. That's what I'm trying to get here. I don't care about the other stuff. I just want to get to 0. I want to be able to do that. this thing to hold for any of the struts and the cables. And therefore, in some sense, none of them are fixed, and therefore, you're actually flexible. That's implied by this duality statement. OK, stresses are a little hard to think about. Let's think about polyhedral liftings, let's say. I prefer to think of polyhedral Liftings, which are liftings of the same kind of shape. That would be a good way to look at it. say. This will be true if and only if every polyhedron lifting is flat. So I guess in our case, it will be 0, because the outside face sets all the z-coordinates to 0, so everything else will have to be in that plane. So these are equivalent statements. All I need to prove is that every polyhedral lifting isflat. So we're going to prove this theorem by contradiction. What could it look like if there was a non-flat polyhedra lifting? like? Did I just erase what I wanted? Probably. Greater than or equal to 0 for cables, less than or equals 0 for struts. That's the one I care about. Who cares about cables? All right, so this is the stress. And equilibrium stress has to be less than less than zero. That means the stress is equal to or less than 0 for each of the two types of cables. That is the equilibrium stress. It's the stress that we want to achieve. or equal to 0 for every strut. Less than or equal to0 corresponds to a valley edge or flat edge. Now in this linkage, almost all the edges are struts. There's a few that are bars, this, like, little path is a bar. Those could be valleys or mountains. They could be mountains or valleys. They're all different shapes and sizes. It's a very complex system. It takes a long time to get it all working. But it's a good start. We don't know. But everything else has to be a valley or flat. For flat, we're good. We're happy. We want all the edges to be flat. So how could it be that almost every edge in this picture is a valley? That seems a little tricky. And we're going to try and find the answer to that. We'll let you know what we come up with in the next few days. Back to Mail Online home. back to the page you came from. to show it can't happen. If everything's a valley, something's going to go wrong at the top picture, because you've got to have mountains, like, turn around. So let's look at the maximum z-coordinate. Now this could actually look like many different things, but I'm going to show you what it looks like in this picture. It looks like a valley with a lot of mountains in the background, and then a big mountain in the foreground. It's a very different picture than the one you see at the bottom of the page. to consider one case-- the easy case-- where you have, in the maximum z-coordinate, you have one point. And then around that, everything descends. OK, these are all the edges incident to that point. You form some kind of-- OK, so this is maximum z. This is another plane. I'm going to slice that, which is maximumZ minus epsilon. And in a sort of typical case, we're going to get a polygon. Now note that this polygon has this nice property, that wherever it has a convex angle, you get a mountain here. stresses have to correspond to bars, because struts can't carry positive stresses. So that means you have at least three bars incident to that edge. But I assumed I was maximum degree 2-- contradiction. Isn't that cool? It's very easy when you set it up right. This works almost always, this works nearly always, almost always. It's a very, very simple thing to do when you know how to do it, and it's a lot of fun to do. but there is another situation which can happen, which is, like, you have-- in the maximum z-coordinate you might have a couple of bars at the top. That's a worry. This is all in maximum z. And so when you slice below, you don't actually get a whole polygon. You don't really get a full polygon, but you do get a lot of different shapes. And that's what we're trying to get with this new technique. might actually only get something around here. But again, you can't get from here to around there without some mountain. It's hard to even imagine, because it can't happen. But this is a mountain. And you want to somehow slope a surface below this plane, it's a mountain, and it's not going to go away, so it's going to have to be a different way. And that's what we're going to try to do here, I'm sure, but it won't be easy. and get around to over here with only valleys-- ain't happening. You've got to have another mountain in here. And so that's the general picture. And the only thing that can happen is you actually prove that all of this stuff has to be flat. So that'sThe one way to get to the top of the mountain, he says. "That's the one way," he says, "that's the way you get there. That's the only way you reach the top." The one case where you can have stress is when you have all of this outside stuff flat. And then inside you don't know. I can prove, using this generalized lemma, that that can happen. You can't have strict valleys, but you could have them all 0. It's possible to have 0.0% stress. It can happen, and it's called a "generalized lemma" It's a way of saying that stress can happen in a certain way. all of these regions are locally flat. And therefore, this whole outside face has to be flat. Therefore, I'm particular. I can't have a reflex vertex, because then this side would have to all be flattened. So then the whole thing is flattened. The only way the whole things can't be flattened is if it's a reflex verticle. That's the only way it can be a reflex Vertical Verticle. So that's the way it is. And that's why it's so special. be flat is if your polygon is already convex, and then we're done. Also straight this can happen. I think with straight, you don't get any stress. Here you can actually have a lifting. Actually, all these guys would be below the plane, because everything's a valley. This would be a valley in the middle of the plane. It would be like a plane in a valley, with the top and the bottom. It's a very different kind of plane. like an actual valley, where you have a village or whatever. That can happen, but only when the boundary of your valley is convex. And so that proves the theorem. And that is the Carpenter's Rule Theorem. Next time, we're going to talk about the other situations. This was two. It was two times. It's two times that you can have two people in the same place at the same time. That's the Carpenterâ€™s Rule The theorem. dimensions, and maximum degree 2. We can think about what happens with degree 3. Then we can get locked things. What happens in three dimensions? Then you can getting locked things in four dimensions. Oh, and other fun things like that. We'll be back in a few days to talk more about our new game, which is coming out in the next few weeks. Back to Mail Online home. back to the page you came from. Back To The page you were from. why is it called the Carpenter's Rule Theorem? Because this is a carpenter's rule. All the edge lengths are the same. But as far as we know that doesn't make this theorem any easier to prove. And also in the carpenterâ€™s rule, you canâ€™t have two sides of the same length. But in this case you can have two different lengths of the edge of a piece of wood. And you can also have different edges of a sheet of paper. have crossings, but other than that, it's just like a carpenter's rule. So there you go. If you've never played with one, this is what people used before flexible measuring tape. They still use them a lot in Europe, but not so much in the US, but you can still play with them in the UK and Europe. You can also play with one in the U.S. and in Australia and Canada, but it's not as popular in Europe and Australia. still buy them at the hardware store. That's it. You can't buy them online. You have to buy them from the store. They are not available online. They can be bought at the store, but you have to pay for them in cash. They're not available on the internet. You must buy them in the store to get them. You cannot buy them on the Internet. They must be bought from the hardware stores. That is it. They have to be bought in the stores.