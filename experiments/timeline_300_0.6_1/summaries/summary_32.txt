Grenade algorithm uses a minimal set of three-point correspondences to solve the camera pose estimation problem in the grenade formulation. The disadvantage of this particular formulation is that it ends up with a four degree polynomial which means that it could give up to a total of four possible solutions. The question becomes whether can we find the solution directly from any four point correspondences such that the solution is unique? The answer is yes and it was formulated by quan at all in a paper that was published in the 1990s. any of the unknowns in the the depth where we simply write it as s i square over here so this can be derived in in this way so here i wrote out all the six combinations of the polynomial equations f i j over here we can see that each one of this equation it's a just a function of two unknowns. The unknowns which are x 4 x 3 x 2 x and 1 can be written as a vector over here 0 0 and as a result we'll get a three by five matrix and a five by one vector. s1 we know that t5 here is actually a vector that is made up of the same entry but of different order so x4 x3 x2 x and 1 of different entry. We know that by observation any two elements the product of tij is going to be equal to tk and tl for this constraint to be valid where i plus j must equal to k plus l. We can substitute the respective components of t5 into this particular constraint to get this equation over here. The solution would be the one that corresponds the last column of v over here. This is actually an over determinant system because b here is seven by three so this means that we have seven equations over here but only three unknowns that we want to solve. Taking svd of b we get the left singular factors multiplied by the singular values as well as the right singular vector matrix over here so once we have solved for the null space vector y using the svd what we can do is to proceed on to solve for lambdas and rho. basis vectors e4 and v5 respectively earlier on when we solve for t5 so we can see that the first row of t over here is actually equals to one 1 and this equates to Lambda multiplied by the first component of v4 plus rho multiplied by v5. Together with this equation over here you can call this equation 1 and then with equation 2 over here that provides a constraint on Lambda and rho we have two equations and two unknowns and we can solve for lambda and Rho uniquely here. where we can solve for since we know that x equals to s1 squared we can solved for the final depth by taking the square root of x. Once s1 is solved we can back substitute s1 into the polynomial equation of f i j s i and s j equals to zero. Once f sj is solved, we can then back substitute it into another equation with sj and solve for the other unknown depth. Finally we will get all the depth after we have gotten all the unknown depths we can do the same thing to to apply absolute orientation to recover the camera pose as in the grenade algorithm. equation we can stack them all up so one two all the way to six equations and we end up with a coefficient matrix with an a matrix of of dimension 6 by 5. in order for non-trivial solution to exist then this guy here better be of a maximum of rank four so what we can do here is that we can take the svd of a and this will give us u sigma v transpose where we simply the vector that corresponds to the least singular value in sigma. to the solution of s1 over here now it turns out that the same algorithm that we use to solve the linear four point and the linear five point can be applied to any number of point correspondences that is four or uh more points. Here we just need to solve for the svd of a m minus 1 multiplied by m minus 2 divided by 2 by 5 uh matrix of a to get the solution for the vector t 5 but the problem here is that the overall complexity is a cubic in the order of the number of points that is used to form a. proposed by lapati in the year 2006 is that instead of using every single point correspondences that is given to us the the core idea is that here we'll make use of all these points to define four control points. Even for a very large n the number of control points still stay constant as uh fall. So now this control point becomes our unknown so that we also need to solve for in addition to the camera rotation and translation where these 3d points they are given and they are known. The number of basis solutions that we can get from solving the equation mx equals to zero over here depends on the size of m and which in turn depends on number of point correspondences that we have. In the case where we have only one basis solution where capital n here equals to 1, we can write the solution as x equals to beta of v where v here is the null space vector of the equation. In this particular case, we'll make use of the known distance between the control points to solve for the unknown beta over here. camera reference frame we can substitute it back into this equation to recover the 3d points that is defined in the camera frame. Once we know this we will be able to solve for the rotation and translation between this two sets of points. We can solve r and t between these two frames using the absolute orientation algorithm. And then finally we look at the efficient pmp algorithm which is a on complexity algorithm that solves the camera post estimation problem using the efficient orientation algorithm and the efficient perspective endpoint problem. for the camera pose using a set of control points using four control points in particular and we saw that this uh it's uh the complexity is a linear in terms of the number of points which is much easier to compute then we also saw the degeneracy cases for the camera post estimation problem in particular. If all the points plus the camera center forms a plane then this is also a degenerate case and that's the end of today's lecture thank you mx equals to zero. Mx equals zero.