so we saw that the three-point correspondences are needed to solve the camera pose estimation problem in the grenade formulation. The disadvantage of this particular formulation is that it ends up with a four degree polynomial which means that it could give up to a total of four possible solutions. In order to choose the correct solution at least the fourth point is needed here so what we usually do here is that if we choose the grenade algorithm we'll use the three point to solve for the p3p problem and given that camera pulse of rnt because we also know k. i will talk about the linear four-point algorithm that was published in the 1990s. We have a system of three polynomials equation from the cosine rule where s1 s2 and s3 are the unknown depth of the three points. Each equation is only a function of our two unknowns so we can see that any three of this combination would give us one fourth degree polynomial which we denote as g x. There's no guarantee that two separate equations would be the same solution and solution would be considered as correct solution. furthermore we have three polynomial equations with the same unknown variable so there's no guarantee that all this are going to be the same solution due to noisy data and probably the most important part is that we cannot profit from this data redundancy which should increase the stability. In this case here because get solutions doesn't agree well due to the noise so it means that the solution is not stable at all and a better solution here is proposed by uh kwan and lan in the paper published in active tipami in the year 1999. any of the unknowns in the the depth where we simply write it as s i square over here so this can be derived in in this way so here i wrote out all the six combinations of the polynomial equations f i j over here we can see that each one of this equation it's a just a function of two unknowns. When we can factorize out all these coefficients as a matrix and the knowns which are x 4 x 3 x 2 x and 1 can be written as a vector over here 0 0 and as a result we'll get a three by five matrix and a five by one vector. over here which is in the form of a x equals to zero uh we have seen this homogeneous linear equation many times so now this means that we get this form of equation over here. A t which is written as a t equals to 0 over here and what it means is that we simply have to solve for the unknowns over here so this matrix here is known and the unknown contained in this particular vector here and we know that since a is a three by five matrix uh at most have a rank of uh three this is the same as solving ax equals tozero. s1 we know that t5 here is actually a vector that is made up of the same entry but of different order so x4 x3 x2 x and 1 of different entry. We know that by observation any two elements the product of tij is going to be equal to tk and tl for this constraint to be valid where i plus j must equal to k plus l. We can substitute the respective components of t5 into this particular constraint to get this equation over here. three by one vector it consists of lambda squared, rho squared which are the unknowns that we want to solve. Taking svd of b we get the left singular factors multiplied by the singular values as well as the right singular vector matrix over here. The solution would be the one that corresponds the last column of v over here so once we have solved for the null space vector y using the svd what we can do is to proceed on to solve for lambda and rho because we know that y 3 over here is equals to a lambda square. rho square equals to y 2 which we can take this divided by this to cancel away Lambda one of the lambdas here to get the ratio of Lambda over rho. We can do the same thing by y1 divided by y2 where rho cancels off and we will get the same ratio so there are two possible solutions. After we obtain the ratio we can substitute it back into this equation over here which i have gotten from the two null space basis vectors e4 and v5 respectively earlier on when we solve for t5. where we can solve for since we know that x equals to s1 squared. Once s1 is solved we can back substitute s1 into the polynomial equation of f i j s i and s j equals to zero. After we have gotten all the unknown depths we can do the same thing to to apply absolute orientation to recover the camera pose as in the grenade algorithm and here what's interesting here is that because we have four point four point we can get all the depth in this way. correspondences and we can see that because rho and lambda here can be determined in a unique way and uh x here can also be determined Â in the unique way where we simply take out the average of this because all the illusions are going to be quite similar or quite close to each other. As a result we'll get the unique solution provided that the four points are not degenerate so uh in this linear four point algorithm the the there will still be two degenerate cases. as what we have seen earlier on now uh it happens that the linear four-point algorithm can also be applied to more than four points so for example when n equals to five when there are five point correspondences and in this particular case uh we uh we will end up to have a system of polynomial equations that is in this form a uh t equals to 0 where t here still remain as a 5 by 1 vector that consists of x that we saw earlier on where x here is simply equals to s 1 square. equation we can stack them all up so one two all the way to six equations and we end up with a coefficient matrix with an a matrix of of dimension 6 by 5. in order for non-trivial solution to exist then this guy here better be of a maximum of rank four so what we can do here is that we can take the svd of a and this will give us u sigma v transpose where we simply the vector that corresponds to the least singular value in sigma. The epmp algorithm mitigates the problem of the linear endpoint algorithm that was shown earlier on by quan and lun that was published in the year 1999. The algorithm has cubic complexity in the order of the number of points that is used to form a. The cubic complexity here becomes a limiting factor for us to apply for this particular algorithm to a number of point correspondence which is significantly large now in 2006 the paper published by vincent lapati which is called the epMP algorithm was first published. proposed by lapati in the year 2006 is that instead of using every single point correspondences that is given to us the the core idea is that here we'll make use of all these points to define four control points. Even for a very large n the number of control points still stay constant as uh fall. So now this control point becomes our unknown so that we also need to solve for in addition to the camera rotation and translation where these 3d points they are given and they are known. now we have two equations over here in terms of uh in terms. of the control points and all the known uh parameters because this is just a projection of one single point i over here. Since each point correspondence gives us two independent equations what this simply means is that we need to stack them up into 2n by 12 matrix which we call m to solve for the 12 by 1 unknown of control points in this homogeneous linear equation. The number of basis solutions that we can get from solving the equation mx equals to zero over here depends on the size of m and which in turn depends on. the number of point correspondences that we have. that parameterize the four unknown control points in the camera coordinate frame and we'll make use of the known distance between the control points to solve for the unknown beta over here. We note that the distance between any two of the points are always going to be the same regardless of the reference frame. Since we have four points and all together we would have six constraints over here we have all together six pairs of distances over here one two three four five and six the six distances which we can put together into this weighted sum equation. for the camera pose using a set of control points using four control points in particular and we saw that this uh it's uh the complexity is a linear in terms of the number of points which is much easier to compute then we also saw the degeneracy cases for the camera post estimation problem in particular. If all the points plus the camera center forms a plane then this is also a degenerate case and that's the end of today's lecture thank you mx equals to zero. Mx equals zero.