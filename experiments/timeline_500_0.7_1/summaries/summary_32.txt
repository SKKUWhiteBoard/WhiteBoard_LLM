The grenade algorithm uses a minimal set of three-point correspondences to solve the camera pose estimation problem. The disadvantage of this particular formulation is that it ends up with a four degree polynomial which means that it could give up to a total of four possible solutions. The solution that gives the minimal reprojection error would be considered as the correct solution. The question becomes whether can we find the solution directly from any four point correspondences or more than four point Correspondences such that the solution is unique. equation in terms of s1 and we will find that if we do this it will end up to be a 4 degree polynomial in the unknown of sOne. A better solution here is proposed by uh kwan and lan in the paper published in active tipami in the year 1999 so what they suggest in this particular paper is that for n equals to four that means that it's a four-point algorithm. They propose a linear four point algorithm where we have seen earlier on that since we have six polynomials. have a rank of uh three this is the same as solving ax equals to zero where now a here has arank of three the rank of a is at max going to be equals to uh just three so but we have a vector so x here is actually a vector of uh 5 by 1 which means that this has to live in a five-dimensional subspace. A system of homogeneous linear equations is under constraint but what we can do here is that we can take the last two columns that corresponds to b4 and v5 in the right singular. where we can solve for since we know that x equals to s1 squared we can solved for the final depth by taking the square root of x. Once s1 is solved we can back substitute s1 into the polynomial equation of f i j s i and s j equals to zero. We can then solve for the other unknown depth and finally we will get all the depth after we have gotten all the unknown depths we can do the same thing to to apply absolute orientation to recover the camera pose as in the grenade algorithm. The epmp algorithm mitigates the problem of the linear endpoint algorithm that was shown earlier on by quan and lun that was published in the year 1999 which has cubic complexity in the order of the number of points. The objective is actually to find out the relative transformation between the camera frame and the world frame. We'll first look at the case where these four control points are non-coplanar control points this means that these four Control points will not lie on a plane. We will then use the same relation for the 3d points in the camera coordinates. Every entry here every row here will give us one constraint one equation so all together we have four equations and four unknowns which is in terms of the alpha over here and we can solve for alpha 1 alpha 2 alpha 3 alpha 4 for every single point. The only set of unknowns that remain would be the control points in the camera frame denoted by cj uh to the superscript of c where j here equals to uh 1 2 3 and 4. Since each point correspondence gives us two independent equations this simply means that we need to stack them up into a matrix to solve for the 12 unknowns in total. the the points so just now we say that we are solving for beta 1 beta 2 and so on using the constraints the fixed distance between any two uh control points now we are reduced to only three constraints from the six constraints that we have earlier on. Once we know this we will be able to solve for the rotation and translation between this two sets of 3d points they are actually the same 3D points that is defined in two different reference frames. The complexity is a linear in terms of the number of points which is much easier to compute. forms a plane then this is also a degenerate case and that's the end of today's lecture thank you mx equals to zero. Mx is the letter that starts with the letter "m" and ends in "x" mx is also the letters that start with the letters "n" and "o" mX is the word that begins with "n", and ends with the word "n". mx means "one" and n is the number of a person or object.