The final contest, which is due tonight, is to design an agent that plays together with another agent to try to collect food pellets while not getting eaten by ghosts. Submissions for that, your last chance to submit are tonight at midnight. And on Thursday in lecture, we'll discuss the results. The idea behind these two lectures is to look at advanced applications. We will not quiz you on these application lectures, on the final exam, or anything like that. It's more meant to give you more perspective rather than extra study materials. Search is very prevalent in language processing, and we'll cover some of that on Thursday. Adversarial games. Learning to acquire behaviors. We'll look at some real robot behaviors in flight and in legged locomotion. And dealing with uncertainty. So AlphaGo. Today's state-of-the-art in Go is that there are computer players better than the best human players. But actually, if you went back to March 2016, that was not the case yet. So how do you make an AI for Go? DeepMind's AlphaGo system can predict who will win a game of Go. It uses a neural network to evaluate the value of a position. This can be used to decide who is likely to win from a given situation. AlphaGo can also use Monte Carlo rollouts to predict the outcome of a game. It can then use this data to make decisions about which moves to consider. The system is currently being trialled in a beta version of the game against human players. It is expected to be released to the public later this year. AlphaGo Zero has no prior knowledge. It starts at a pretty, actually, negative elo rating. Loses all the time initially. It's playing itself, but then gets tested against a set of players. After 21 days, it goes past where AlphaGo Lee Sedol was. And then it was still creeping up after 40 days. Once you reach that level, essentially, there's no further to go, because you solved the game. With reasonable compute power, it traverses the whole tree, even with alpha beta pruning. CNN's John Defterios: How do you get a helicopter to do something like this? He says it's hard to stabilize a helicopter when you only know where you are up to a couple meters. Defterio: We set up a hidden Markov model, where we considered the state unknown. He says we can build a model for learning a bunch of parameters that predict the next state, and solve it at this point in the learning.to until this experiment was run. To learn more, visit CNN iReport. saw it making these wild motions, overcompensating. It pushed the controls so hard that the engine died. The engine just couldn't push it, died. At that moment, the blades stopped spinning, or they slowed down. Then what happened is our human pilot took back control to try to save the helicopter. And believe it or not, they actually saved this. It landed a little harder than you want to land, but it landed on its feet and it could be recovered from that, which was pretty crazy. Hertz: When we collect paths from a human pilot, they tend to be noisy. Hertz: We could learn the trajectory from these as noisy observations. Hidden Markov models. We can penalize our helicopter for deviating from the data. Herts: We can run reinforcement learning in simulation to find a good helicopter controller and run it on the real helicopter. That point, was much better than our autonomous controller. That's why you might say, only 20 seconds of controls? We're looking at the helicopter, not the controls. The helicopter uses roughly a fixed amount of fuel, anyway, per time. So it's more that it has less weight to carry as it has used more fuel. This helicopter had inverted slide, where it has more power, 3 Gs. It can generate three times the power of gravity. OK, let's take a short break here. And after the break,. let's do legged locomotion and manipulation. All right, let't restart. Any questions about the first half? Yes? is a separate linear feedback controller for each time slice. So essentially, value iteration, but in a continuous space. If there is no wind, you can actually just run the linear feedback control. It will be fine. But if there's some wind gusts that could throw you off, you want to use the value functions and the two second look ahead. If you have a locally linear dynamics and quadratic reward function, it turns out that's the one continuous state action space scenario where you can run exact value iteration. against those value functions to do the controls. Can it be done with one unified network? Likely, it can. It might take some work, exactly, figuring out how to do it. Here's an example of how hard this can be. This is a video from 2015, there was the Doppler Robotics Challenge, which was held in Pomona, just east of Los Angeles. It's called the "Doppler Challenge" and it's a competition for roboticists. It was won by a team from the University of California, San Diego. of Los Angeles. People had two years to work on this. And what did the robot have to do? It had to, essentially, drive a car or walk, but driving the car was recommended. Then get out of the car, walk a little bit, open a door, grab a drill, drill a hole, walk some more. So doesn't sound that complicated. But actually, it turned it's very complex to get a robot to do that. And it's indicative of how hard it is to do walking with robots. build a model of the world. They would have sensors. Based on that model, you could simulate the world, predict what you should do, not unlike what we did with the helicopter. We learned models of how helicopter dynamics works. Think about what will happen as a function of which actions we take, and maybe have a value function, and then take the actions that lead to the good outcome. The thing is modeling these situations proved even harder than modeling helicopters, because your sensing needs to understand whether or not you're already making contact, and making contact or not. DARPA has been working on autonomous driving since 2005. The goal is to have a car that can drive itself in a desert race. The team has developed a way to teach a robot to find a path across rocky terrain. The robot can learn the weights and the features of the terrain to find the best path. It can then plan on that new terrain with that reward function and see how well it works, says Dr. Michael Bociurkiw, head of DARPA's autonomous driving program. Stanford robot becomes first vehicle in history to drive 132 miles by itself. Stanley drives for six hours and 53 minutes at an average speed of 90 miles an hour. To finish, they must wind through a treacherous mountain pass. Stanley leads the pack, and just five robots remain on the course. The first time it's ever been done, autonomous vehicles. In 2005, four cars finished the 150 miles. That's a Berkeley entry. Only motorcycle in the race. Yeah, you were [? not to take a seat in the autonomous cars of 2005. With a camera, you can often look further ahead. LIDAR sends out a laser beam, measures how long it takes to get back. With HMM, you get 0.02% false positives of where there might be obstacles. An HMM can de-noise those readings into a more reliable estimate of the geometry of the world around you. It would see that the readings are different and decide it needs to steer around that.an obstacle. If you're an urban environment, there'll be a lot more obstacles. A camera will be better at that than a LIDar. Self-supervision is a trick that's very widely used to reduce labeling efforts. So the camera now knows all the red here is road. In urban environments, there's even more need to recognize, not just road versus not road. A lot of progress has been made this is video from 2013. This was before deep neural networks were heavily used for this kind of thing. It's only getting better to recognize what's in scenes, thanks toDeep neural networks. Instead of classifying into which categories in the image, you would classify each pixel, as to what is in each pixel. tail of special events that can happen when you're driving. You can measure progress by just demo videos, which is one way, and it gives you some kind of feel for what's going on. Another way to measure progress is to see how are these cars doing relative to human drivers. If you test in California, you have to report this data to the DMV to see if your car is doing well or not. It's a number of events per 1,000 miles driven. Red there is human fatalities. Then yellow is human injuries. In green is the Google slash [? wave ?] mode disengagement. doing this. Early on, they were the only ones, as far as I know, but there's more companies now. And you can look at them on these plots and see which companies, how far along, in terms of how many disengagements they need per 1,000 miles driven. Still, so far, quite far removed from human accident rate levels. Another thing people have been pushing, as a consequence of all this, is lower power neural networks. So for example, Kurt Kuetzer at Berkeley has projects on this called SqueezeNet. If they're gigantic, use a lot of power. That's a problem. Let's see what we can do to build smaller networks to make decisions.