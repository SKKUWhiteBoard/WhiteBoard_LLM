so we saw that the three-point correspondences are needed to solve the camera pose estimation problem in the grenade formulation. The disadvantage of this particular formulation is that it ends up with a four degree polynomial which means that it could give up to a total of four possible solutions. In order to choose the correct solution at least the fourth point is needed here so what we usually do here is that if we choose the grenade algorithm we'll use the three point to solve for the p3p problem and given that camera pulse of rnt because we also know k. would be considered as the correct solution since minimal or fourth point is needed to check for the correct solutions. The algorithm was formulated by quan at all in a paper that was published in the 1990s. The question becomes whether can we find the solution directly from any four point correspondences or more than four point Correspondences such that the solution is unique, the answer is yes, says Quan. The solution can be found by solving a system of three polynomials equation from the cosine rule. rewritten into this form and uh interestingly we note that for every equation here it's only a function of our two unknowns so uh we'll get this system of uh polynomial equation written as f12 that is dependent on s1 and s2 and f13 and f23. If we use three point correspondences here we can actually add on to this fourth order polynomials or equation and to over constrain the system. So as a result we'll first get six polynmials in terms of uh s i and s j and now one of the straightforward way is that since we have six of them the six choose three this is going to give three. us three polynomial equations three fourth degree polynometric equation so which we denote as g x g prime x and g prime prime x where x can simply be equals to one of the s square for example we call it s i square. One straightforward way would be to simply solve for x independently in each one of these three. polynomials equation and then just find a common solution to the to this subset. But it's not a good approach for three reasons because what we have to do here is that we. have to solve several four degree poylnomial equations which can be time consuming. furthermore we have three polynomial equations with the same unknown variable so there's no guarantee that all this are going to be the same solution due to noisy data and probably the most important part is that we cannot profit from this data redundancy which should increase the stability. In this case here because get solutions doesn't agree well due to the noise so it means that the solution is not stable at all and a better solution here is proposed by uh kwan and lan in the paper published in active tipami in the year 1999. any of the unknowns in the the depth where we simply write it as s i square over here so this can be derived in in this way so here i wrote out all the six combinations of the polynomial equations f i j over here we can see that each one of this equation it's a just a function of two unknowns. When we can factorize out all these coefficients as a matrix and the knowns which are x 4 x 3 x 2 x and 1 can be written as a vector over here 0 0 and as a result we'll get a three by five matrix and a five by one vector. over here which is in the form of a x equals to zero uh we have seen this homogeneous linear equation many times so now this means that we get this form of equation over here. A t which is written as a t equals to 0 over here and what it means is that we simply have to solve for the unknowns over here so this matrix here is known and the unknown contained in this particular vector here and we know that uh since a is a three by five matrix uh at most have a rank of uh three this is the same as solving ax equals tozero. the svd of a is going to give us a left octagonal matrix of three by five and a square singular matrix with a diagonal of sigma one sigma two sigma three where the last two singular values here are going to be zero. We can rewrite the solution we can write the solution of t5 that we have formulated earlier on here in terms of the two the null space basis vector that we've found from the right singular. We have to now determine Lambda and rho in order to get a solution for t which will lead to the solution. s1 we know that t5 here is actually a vector that is made up of the same entry but of different order so x4 x3 x2 x and 1 of different entry. By observation any two elements the product of tij is going to be equal to tk and tl for this constraint to be valid where i plus j must equal to k plus l we can verify this suppose that i here equals to 1 and j here equalsto 2 and if k here for example equals to 3 so k here equal to 3 l here must be equals to 0 we can substitute this in. We can substitute the respective components of t5 into this particular constraint to get this equation over here. For example in in this case i choose i equals to 1 j equals to 2 and k equals to 3 and l equals to 0. If we look at all the combinations we are in total get seven such equation that is given by this table over here that fulfills the constraint of i plus j plus k plus l and within this particular range that is written here so as a result we'll get seven of these equations over here which we can stack together. three by one vector it consists of lambda squared, rho squared which are the unknowns that we want to solve. Taking svd of b we get the left singular factors multiplied by the singular values as well as the right singular vector matrix over here. The solution would be the one that corresponds the last column of v over here so once we have solved for the null space vector y using the svd what we can do is to proceed on to solve for lambda and rho because we know that y 3 over here is equals to a lambda square. rho square equals to y 2 which we can take this divided by this to cancel away Lambda one of the lambdas here to get the ratio of Lambda over rho. We can do the same thing by y1 divided by y2 where rho cancels off and we will get the same ratio so there are two possible solutions. After we obtain the ratio we can substitute it back into this equation over here which i have gotten from the two null space basis vectors e4 and v5 respectively earlier on when we solve for t5. where we can solve for since we know that x equals to s1 squared. Once s1 is solved we can back substitute s1 into the polynomial equation of f i j s i and s j equals to zero. After we have gotten all the unknown depths we can do the same thing to to apply absolute orientation to recover the camera pose as in the grenade algorithm and here what's interesting here is that because we have four point four point we can get all the depth in this way. correspondences and we can see that because rho and lambda here can be determined in a unique way and uh x here can also be determined Â in the unique way where we simply take out the average of this because all the illusions are going to be quite similar or quite close to each other. As a result we'll get the unique solution provided that the four points are not degenerate so uh in this linear four point algorithm the the there will still be two degenerate cases. as what we have seen earlier on now uh it happens that the linear four-point algorithm can also be applied to more than four points so for example when n equals to five when there are five point correspondences and in this particular case uh we uh we will end up to have a system of polynomial equations that is in this form a uh t equals to 0 where t here still remain as a 5 by 1 vector that consists of x that we saw earlier on where x here is simply equals to s 1 square. equation we can stack them all up so one two all the way to six equations and we end up with a coefficient matrix with an a matrix of of dimension 6 by 5. in order for non-trivial solution to exist then this guy here better be of a maximum of rank four so what we can do here is that we can take the svd of a and this will give us u sigma v transpose where we simply the vector that corresponds to the least singular value in sigma. The same algorithm that we use to solve the linear four point and the linear five point can be applied to any number of point correspondences that is four or uh more points. Here we just need to solve for the svd of a m minus 1 multiplied by m minus 2 divided by 2 by 5 uh matrix of a to get the solution for the vector t 5 but the problem here is that the overall complexity of a svd is much higher than the number of points involved in the solution. The epmp algorithm mitigates the problem of the linear endpoint algorithm that was shown earlier on by quan and lun that was published in the year 1999. The algorithm has cubic complexity in the order of the number of points that is used to form a. The cubic complexity here becomes a limiting factor for us to apply for this particular algorithm to a number of point correspondence which is significantly large now in 2006 the paper published by vincent lapati which is called the epMP algorithm was first published. proposed by lapati in the year 2006 is that instead of using every single point correspondences that is given to us the the core idea is that here we'll make use of all these points to define four control points. Even for a very large n the number of control points still stay constant as uh fall. We'll first look at the case where these four control Points are non-coplanar control points this means that these four Control points will not lie on a plane. We can see that uh here it becomes more tractable because uh even for avery large n of points. a pi uh with a superscript of w what this means is that uh this pi this particular point pi is defined with respect to a world frame which we call f w over here then similarly we will define the four control points that do express the world coordinates so given all these coordinate points of piw here that we've seen earlier on what we want to do here is to find out the relative transformation between the camera frame and the world frame. The number of unknown depth actually grows with the number of points and so now since we are using the control point which stay consistent as four points we will see that uh we have a lot lesser number ofunknowns. over here so we'll make use of the same set of alpha the sameSet of weights that we have seen defined earlier on to weigh the control points in the camera frame. We'll first see how to solve for alpha as well as cj in the world frame using a simple technique that was proposed in this particular paper. The first step would be to compute the centroid of the world points that means that i give uh we are given all the this points which we denote as p i c over here. and then we select the other three control points because all together we need four uh control points. The only set of unknowns that remain would be the control points in the camera frame denoted by cj to the superscript of c where j here equals to uh 1 2 3 and 4. Once we have solved for the alpha as well as the control point so we know alpha ij for every 3d point we'll use the same alpha here in our expression of the 3d points expressed in the world frame. the 2d to 3d correspondences where these 3D correspondences correspondence simply refers to pi in w but we also know the the the corresponding projection into the camera frame so what we can do here what this means here is that we know the projection of pic into the image now let's denote the camera intrinsic value a over here. We can substitute this p-i-c using what we have defined earlier on as a weighted sum of the control points to get this equation over here so now this equation can be expanded into a matrix notation where we fill up every entry in the matrix. Now we have two equations over here in terms of the control points and all the known parameters because this is just a projection of one single point i over here. Since each point correspondence gives us two independent equations what this simply means is that we need to stack them up into 2n by 12 matrix which we call m. The number of basis solutions that we can get from solving the equation mx equals to zero over here depends on the size of m and which in turn depends upon the number of point correspondences that we have. way of solving for the basis equation from this uh mx equals to 0 where m here is a 2n by 12 matrix and x here it's a 12 by 1 vector. Most expensive step of computing this equation over here would be to compute m transpose m itself. Since m is linear with respect to the number of points n this means that uh to compute this particular step over here it was it would be in the time complexity of a linear in the order of uh n and that's why the epmp is a linear complexity uh solution. have only one basis solution where capital n here equals to 1. what this means is that the rank of m must be equals to 11 and means that there are 11 unique constraints that forms the metric of m. Since we know that each point correspondence is going to give us two constraints this simply means that we need a total of 5.5 point correspondences in order to form a metric m with rank of 11 and that would equate to be six point. So in this particular case uh where we have six or more point Correspondences we'll always have a one null space equation that's parameterized by beta over here. that parameterize the four unknown control points in the camera coordinate frame and we'll make use of the known distance between the control points to solve for the unknown beta over here. Since we have four points and all together we would have six constraints over here we have all together six pairs of distances over here one two three four five and six the six distances which we can put together into this weighted sum equation over here which we normalize over all the combination of the distances. We can stack those six constraints into a non-homogeneous linear equation that looks like this l beta equals to rho where beta is parameterized by beta 1 1 beta 1 2 and beta 2 2. be simply the unknowns that is made up of beta 1 beta and beta2 so this is an over-determinant system where we can just take the pseudo inverse of l where beta here is given by the pseudoverse of l multiplied by rho. This will give us the solution for beta which we can then use to solve for beta 1 andbeta2 so in the case where n equals to 3 which means that the solution is a formed by a linear combination of 3 null space basis vector v1 v2 v3. in practice we actually do not end up here because we will not take 4.5 points usually we will just take a minimum of 5 point in order to get these equations over here mx equals to 0. so uh here we solve for beta one beta two and beta three using the same method as uh described earlier on because we have six constraints where we have three unknowns over here. Using the same way we end up with l beta equals to rho which is a non-homogeneous linear equation where l here is a 6 by 6 matrix. four of them are lying on the same plane that means that any one of the point is dependent on all the other three points which means that we have less constraints right now. We'll still use the same formulation as before to formulate m but now m is going to be only two by nine where there's a nine dimensional eigen vector that we need to solve for that's a basis uh uh solution. The main difference here it would be that uh the number of quadratic constraints that we've had before would be between two and nine. The points are actually the same 3d points that is defined in two different reference frames so let's say these are the 3d point p i w would be all expressed with respect to f w. We can solve r and t between these two frames using the absolute orientation algorithm. The efficient pmp algorithm is a on complexity algorithm that solves the camera post estimation problem using theabsolute orientation. It solves for the unknown depth and then make use of the known depth to solve for the rotation and translation using the Absolute post-estimation problem. for the camera pose using a set of control points using four control points in particular and we saw that this uh it's uh the complexity is a linear in terms of the number of points which is much easier to compute then we also saw the degeneracy cases for the camera post estimation problem in particular. If all the points plus the camera center forms a plane then this is also a degenerate case and that's the end of today's lecture thank you mx equals to zero. Mx equals zero.