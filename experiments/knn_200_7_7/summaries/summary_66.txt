Professor: Today we're going to talk about partial differential equations. Professor Swan is going to do a review on Friday. Next time I'll be lecturing to you will be a week from Friday. The homework following the quiz will be posted and so you guys can get started on that. For those of you who had trouble with COMSOL, might take some extra time, since it's the first time you're doing it, so I would suggest you at least give it a try early. When you have three or more dimensions in your PDE, you have, like, electrochemical shocks in some of his systems. You have to use special mathematics to correctly handle that. In the Navier-Stokes world, I'll show you what people do to try to deal with that. There's many other problems. If you get into those things, you should take the PDE class for hyperbolic equations. They'll tell you just all about the solvers for those kinds of things and special tricks. in practice, there's a big problem if the number of unknowns gets to be so large. That's the main problem. 10,000 unknowns are a lot harder to solve for than 100 unknowns. In fact, it's even going to have trouble with a 100 millionunknowns. And so, how would I solve this normally, is I would take the Jacobian of. and I'd take an initial guess and do this out. You have to provide some initial. guess. This is actually pretty hard if you have 100 million. The best solver in the world discretizes in space and then does ODE IVP using explicit method for marching it. So they'll have like 100 million mesh points and then 100 species. So that's a pretty big set of variables and you need to know all these numbers at each point. And they use, like, 40% of one of the national supercomputer centers will be running at one time for one job like this. But it works. You never have to store anything that's too big. system, you're looking up special tricks. How do people in this field deal with this particular PDE? Special ways that are good for that kind of PDE. All kinds of problems have this kind of thing. You can have just regular chemical reactors, like in multiple steady states, little tiny fluctuations can make it jump from one steady state to another one. A lot of these things, how you do a lot of combustion problems is that things work out. But in some situations, this is true. The methods that we're going to talk about mostly are ones for solving parabolic and elliptic problems. Do you problem you're trying to solve, for example, might be a steady state problem like this. What's happening downwind is very much affected by what happened upwind, but not vice versa. And if you think that your time dependent problem really converges to the steadyState problem, then you could put any random initial guess in and march it along in time enough, and eventually, it should end up at the solution. Time and space are so related by the velocity of the flow. As you slow the velocity down, then the diffusion will start to fight the velocity more and more. We'll have similar kinds of phenomenon then. It's almost like a parabolic time system that, if the flow is fast enough, the fusion backup, anything moving upstream is negligible. And so then, you'll have the same kind of issues. In fact, you may even try to solve it by just starting it at the upstream end and competing stuff and then propagating what that output from that first one does. There's a thing called local Peclet number, which is-- OK? If you make the local PEClet number too large, actually anywhere bigger than 2, and you try to solve this equation, what you get is oscillations, unphysical oscillations. If you take your delta z too big, then it's a terrible approximation to do this. So I would do better to change from this center difference formula to what's called the upwind difference formula. Just use that instead of using this formula. Now, you wouldn't think that that would make much difference, but it makes a gigantic difference. So if you look at the solution, the analytical solution of this problem, it's like this. Where this has a very, very thin layer at the end. It's like the flow has pushed all your stuff to one side. And if you choose your delta z to be from here to here, that's how big yourDelta z is, and then you're computing the derivative of this point halfway along from here. You compute your derivative like that. It is not a very good, not avery accurate representation of what the real derivative is here. before. In that case, there was a region of the boundary here that had some concentration c naught, and then there was, over here, the concentration was zero. Here, it's some number, 17, whatever number it was. And if you think of how to model what's going on, one way to look at it is, I have a diffusive flux coming in from the drug patch, diffusing the drug into the flow. And the flow gets slower as I get closer to the wall because of the friction with the wall. Normally you would do this with Gaussian elimination and huge steps. It would solve it perfectly, right? Right, backslash. You guys have used it a few times. It's really nice. But you're going to give up that because you can't afford it because the memory, it's consuming too much memory and your cheapo department didn't buy enough RAM in your computer for you. So you're instead trying a direct method which is, so it's trading off CPU time versus RAM. And because it only has to do a forward multiplication, you don't have to actually store j. time accuracy. In those cases, you might instead want to use-- So this is time accurate. There's another method. I don't know if I should call it time inaccurate. If you don't care, if the solution is really, what the solution yft is, all you care about is where you get to, then you can do other methods. One of them is the backward Euler. This is what's actually used a lot. However, this is now an implicit equation. So we may have to solve it with some method like Newton-Raphson.