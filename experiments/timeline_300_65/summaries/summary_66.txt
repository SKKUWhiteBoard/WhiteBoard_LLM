MIT OpenCourseWare offers high quality educational resources for free. To make a donation, or to view additional materials from hundreds of MIT courses, visit MIT OpenCourse Ware at ocw.mit.edu. The next time I'll be lecturing to you will be a week from Friday. The homework following the quiz will be posted and so you guys can get started on that. That homework involves a COMSOL problem which might take some extra time, since it's the first time you're doing it. So I would suggest you at least give it a try early. a diffusion term, a convection term, and a reaction term. This is part of the Navier-Stokes equations for the whole reactive flow system. And what's special about the partial differential equations is that, in this case, this partial derivative is respect to time, holding all the spatial coordinates fixed. Now, you can change coordinates however you want. Just really watch out that you carefully follow the rules about what you hold fixed, when you change things. Otherwise you can cause all kinds of craziness. methods. So all those methods basically look the same. You just get equations that have more unknowns in them. In practice, there's a big problem if the number of unknowns gets to be so large. Once you get up to a million unknowns, we're starting to talk serious math, now. So you have all those kinds of problems that we had in the ODE case, and it's just sort of amplified by the fact that we have to worry about numerical stability. A very small spark can make a really big difference in a system like that. If you get numerical noise at some point, that might be enough to kick it over from, say, not igniting at all to having a detonation, which is a completely different solution. A small change in one cell, for example, could be areally big difference. So this is not just in combustion problems you have these kinds of instabilities. All kinds of problems have this kind of thing. In a hyperbolic system, information-- there's regions of the domain that you can make a change here and it doesn't make any effect on some domain part over there. In an elliptic problem, you introduce some numerical noise and as you solve it, the numerical noise kind of goes away. And then another kind of problem that we get into a lot is like this one. This is called parabolic. And typically in the cases that are parabolic, we have time as part of the problem. a flow in a pipe. And you have a nice, fast velocity flow down the pipe. What's happening downwind is very much affected by what happened upwind, but not vice versa. So it has a directionality, even though I might do it as a steady state problem and not have time in it at all. If you slow the velocity down, then the diffusion will start to fight the velocity. And so then, you'll have the same kind of issues. In fact, you may even try to solve it by just starting it at the upstream end and competing stuff. If you look in the textbook at figures 6.7, 6.8, it's kind of a very famous problem. If you make the local Peclet number too large, actually anywhere bigger than 2, and you try to solve this equation, what you get is oscillations, unphysical oscillations. So if you take your delta z too big, then it's a terrible approximation to do the solution. And if you look at the analytical solution, you can see that what we're doing is taking a differential and turning it into a finite solution. before. There's a similar thing and it might be relevant to the COMSOL problem that Kristyn showed you on Monday, is you can-- In that case, there was a region of the boundary here that had some concentration c naught, and then there was, over here, the concentration was zero. Here, it's some number, 17, whatever number it was. And if you think of how to model what's going on, one way to look at it is, I have a diffusive flux coming in from the drug patch, diffusing the drug into the flow. with this size right here. Is that right? So you could compute what the steady state concentration would be if it's just coming in and flowing out. This is the finite volume view of this kind of problem. And so you can write the equations that way, instead. And what you really care about are what the velocity flows and the diffusive fluxes are on these boundaries around the point. So you don't try to compute things right at the point, you compute around it. or every state variable at every state point at all times. And the problem is, my computer can't handle infinite number of unknowns. In fact, it's even going to have trouble with a 100 millionunknowns. And so, I have to figure out what to do. So how would I solve this normally, is I would take the Jacobian of this and I would do, I'd take an initial guess and I'd update it and have theJacobian times my change from the initial guess to the equal negative. 16th numbers in this matrix are zero. So we don't have to represent them. But there still might be quite a few. Probably the diagonal events are non-zero, so that's like 10 to the 8th of them right there. So you're not going to just use Gaussian elimination. So what do you have to do? You want to find a method. They're called direct methods to solve this kind of problem. And the direct methods are ones that you don't actually store the gigantic matrix. compute delta y. Now, this whole approach is sort of based on Newton-Raphson. We know that doesn't have the greatest radius of convergence. So how are we going to get a good initial guess if you have a 100 million unknowns? So what methods do we know? So one idea is you could do things like homotopy, stuff like that. If you could somehow take your PDE system, get rid of the nonlinear terms. You're really good at solving linear systems of PDEs. Maybe you could coax it over. for the derivatives. Or I did colocation or something to convert this into algebraic equations. And now, I'm going to time march this and I just-- This is very long. It's a 100 million. So how are we going totime march that? Well there's kind of two schools of thought for this. One school of thought is, if I can use an explicit method, an explicit ODE solver, those are pretty nice. Because all I have to do is evaluate f and then I can march along and I never have to save any matrices. too big. The biggest thing you have to store are the vectors. Now, this is really good if an explicit solver can solve it. And also, if you want a time accurate solution. But suppose we're trying to really solve the steady state problem over here. Then we really don't care about the time accuracy. In the end, we're only going to report our steady state solution. That's all we cared about. So in those cases, you might instead want to use-- So this is time accurate. set up is right, so you can use it. But if you can, it can be pretty good. All right. See you on Friday. Back to Mail Online home. back to the page you came from. Click here for the latest from CNN.com. Back To the pageYou came from the page You came from: Back to the Page You Came From: Back To The Page You Were Originally From: The page you were originally from: The Page you were initially from: the Page you started from.